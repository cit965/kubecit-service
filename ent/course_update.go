// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/category"
	"kubecit-service/ent/course"
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetLevel sets the "level" field.
func (cu *CourseUpdate) SetLevel(i int32) *CourseUpdate {
	cu.mutation.ResetLevel()
	cu.mutation.SetLevel(i)
	return cu
}

// AddLevel adds i to the "level" field.
func (cu *CourseUpdate) AddLevel(i int32) *CourseUpdate {
	cu.mutation.AddLevel(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CourseUpdate) SetName(s string) *CourseUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDetail sets the "detail" field.
func (cu *CourseUpdate) SetDetail(s string) *CourseUpdate {
	cu.mutation.SetDetail(s)
	return cu
}

// SetCover sets the "cover" field.
func (cu *CourseUpdate) SetCover(s string) *CourseUpdate {
	cu.mutation.SetCover(s)
	return cu
}

// SetPrice sets the "price" field.
func (cu *CourseUpdate) SetPrice(f float32) *CourseUpdate {
	cu.mutation.ResetPrice()
	cu.mutation.SetPrice(f)
	return cu
}

// AddPrice adds f to the "price" field.
func (cu *CourseUpdate) AddPrice(f float32) *CourseUpdate {
	cu.mutation.AddPrice(f)
	return cu
}

// SetTags sets the "tags" field.
func (cu *CourseUpdate) SetTags(s string) *CourseUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CourseUpdate) SetCreatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CourseUpdate) SetStatus(i int32) *CourseUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CourseUpdate) AddStatus(i int32) *CourseUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// SetCategoryID sets the "category_id" field.
func (cu *CourseUpdate) SetCategoryID(i int) *CourseUpdate {
	cu.mutation.SetCategoryID(i)
	return cu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCategoryID(i *int) *CourseUpdate {
	if i != nil {
		cu.SetCategoryID(*i)
	}
	return cu
}

// ClearCategoryID clears the value of the "category_id" field.
func (cu *CourseUpdate) ClearCategoryID() *CourseUpdate {
	cu.mutation.ClearCategoryID()
	return cu
}

// SetOwnerID sets the "owner" edge to the Category entity by ID.
func (cu *CourseUpdate) SetOwnerID(id int) *CourseUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the Category entity by ID if the given value is not nil.
func (cu *CourseUpdate) SetNillableOwnerID(id *int) *CourseUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the Category entity.
func (cu *CourseUpdate) SetOwner(c *Category) *CourseUpdate {
	return cu.SetOwnerID(c.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Category entity.
func (cu *CourseUpdate) ClearOwner() *CourseUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.SetField(course.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedLevel(); ok {
		_spec.AddField(course.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Detail(); ok {
		_spec.SetField(course.FieldDetail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Cover(); ok {
		_spec.SetField(course.FieldCover, field.TypeString, value)
	}
	if value, ok := cu.mutation.Price(); ok {
		_spec.SetField(course.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.AddedPrice(); ok {
		_spec.AddField(course.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(course.FieldTags, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(course.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(course.FieldStatus, field.TypeInt32, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetLevel sets the "level" field.
func (cuo *CourseUpdateOne) SetLevel(i int32) *CourseUpdateOne {
	cuo.mutation.ResetLevel()
	cuo.mutation.SetLevel(i)
	return cuo
}

// AddLevel adds i to the "level" field.
func (cuo *CourseUpdateOne) AddLevel(i int32) *CourseUpdateOne {
	cuo.mutation.AddLevel(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CourseUpdateOne) SetName(s string) *CourseUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDetail sets the "detail" field.
func (cuo *CourseUpdateOne) SetDetail(s string) *CourseUpdateOne {
	cuo.mutation.SetDetail(s)
	return cuo
}

// SetCover sets the "cover" field.
func (cuo *CourseUpdateOne) SetCover(s string) *CourseUpdateOne {
	cuo.mutation.SetCover(s)
	return cuo
}

// SetPrice sets the "price" field.
func (cuo *CourseUpdateOne) SetPrice(f float32) *CourseUpdateOne {
	cuo.mutation.ResetPrice()
	cuo.mutation.SetPrice(f)
	return cuo
}

// AddPrice adds f to the "price" field.
func (cuo *CourseUpdateOne) AddPrice(f float32) *CourseUpdateOne {
	cuo.mutation.AddPrice(f)
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CourseUpdateOne) SetTags(s string) *CourseUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CourseUpdateOne) SetCreatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CourseUpdateOne) SetStatus(i int32) *CourseUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CourseUpdateOne) AddStatus(i int32) *CourseUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// SetCategoryID sets the "category_id" field.
func (cuo *CourseUpdateOne) SetCategoryID(i int) *CourseUpdateOne {
	cuo.mutation.SetCategoryID(i)
	return cuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCategoryID(i *int) *CourseUpdateOne {
	if i != nil {
		cuo.SetCategoryID(*i)
	}
	return cuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (cuo *CourseUpdateOne) ClearCategoryID() *CourseUpdateOne {
	cuo.mutation.ClearCategoryID()
	return cuo
}

// SetOwnerID sets the "owner" edge to the Category entity by ID.
func (cuo *CourseUpdateOne) SetOwnerID(id int) *CourseUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the Category entity by ID if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableOwnerID(id *int) *CourseUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the Category entity.
func (cuo *CourseUpdateOne) SetOwner(c *Category) *CourseUpdateOne {
	return cuo.SetOwnerID(c.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Category entity.
func (cuo *CourseUpdateOne) ClearOwner() *CourseUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Where appends a list predicates to the CourseUpdate builder.
func (cuo *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.SetField(course.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedLevel(); ok {
		_spec.AddField(course.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Detail(); ok {
		_spec.SetField(course.FieldDetail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Cover(); ok {
		_spec.SetField(course.FieldCover, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Price(); ok {
		_spec.SetField(course.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.AddedPrice(); ok {
		_spec.AddField(course.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(course.FieldTags, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(course.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(course.FieldStatus, field.TypeInt32, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
