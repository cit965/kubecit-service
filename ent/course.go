// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/course"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IsRecommend holds the value of the "isRecommend" field.
	IsRecommend bool `json:"isRecommend,omitempty"`
	// IsIntegral holds the value of the "isIntegral" field.
	IsIntegral bool `json:"isIntegral,omitempty"`
	// SecondCategory holds the value of the "secondCategory" field.
	SecondCategory string `json:"secondCategory,omitempty"`
	// SaleType holds the value of the "saleType" field.
	SaleType int32 `json:"saleType,omitempty"`
	// DiscountPrice holds the value of the "discountPrice" field.
	DiscountPrice float32 `json:"discountPrice,omitempty"`
	// FirstCategoryName holds the value of the "firstCategoryName" field.
	FirstCategoryName string `json:"firstCategoryName,omitempty"`
	// TeachingType holds the value of the "teachingType" field.
	TeachingType int32 `json:"teachingType,omitempty"`
	// CourseLevel holds the value of the "courseLevel" field.
	CourseLevel int32 `json:"courseLevel,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	UpdateBy time.Time `json:"updateBy,omitempty"`
	// LecturerName holds the value of the "lecturerName" field.
	LecturerName string `json:"lecturerName,omitempty"`
	// PurchaseCnt holds the value of the "purchaseCnt" field.
	PurchaseCnt int32 `json:"purchaseCnt,omitempty"`
	// TotalHour holds the value of the "totalHour" field.
	TotalHour float32 `json:"totalHour,omitempty"`
	// BizCourseDetail holds the value of the "bizCourseDetail" field.
	BizCourseDetail string `json:"bizCourseDetail,omitempty"`
	// CourseCover holds the value of the "courseCover" field.
	CourseCover string `json:"courseCover,omitempty"`
	// Ext3 holds the value of the "ext3" field.
	Ext3 string `json:"ext3,omitempty"`
	// Ext2 holds the value of the "ext2" field.
	Ext2 string `json:"ext2,omitempty"`
	// BizCourseChapters holds the value of the "bizCourseChapters" field.
	BizCourseChapters string `json:"bizCourseChapters,omitempty"`
	// Ext1 holds the value of the "ext1" field.
	Ext1 string `json:"ext1,omitempty"`
	// SalePrice holds the value of the "salePrice" field.
	SalePrice float32 `json:"salePrice,omitempty"`
	// BizCourseTeacher holds the value of the "bizCourseTeacher" field.
	BizCourseTeacher string `json:"bizCourseTeacher,omitempty"`
	// BizCourseAttachments holds the value of the "bizCourseAttachments" field.
	BizCourseAttachments string `json:"bizCourseAttachments,omitempty"`
	// UpdateTime holds the value of the "updateTime" field.
	UpdateTime time.Time `json:"updateTime,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// CourseName holds the value of the "courseName" field.
	CourseName string `json:"courseName,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	CreateBy string `json:"createBy,omitempty"`
	// PurchaseCounter holds the value of the "purchaseCounter" field.
	PurchaseCounter int32 `json:"purchaseCounter,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime time.Time `json:"createTime,omitempty"`
	// Clicks holds the value of the "clicks" field.
	Clicks int32 `json:"clicks,omitempty"`
	// SecondCategoryName holds the value of the "secondCategoryName" field.
	SecondCategoryName string `json:"secondCategoryName,omitempty"`
	// Status holds the value of the "status" field.
	Status       string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldIsRecommend, course.FieldIsIntegral:
			values[i] = new(sql.NullBool)
		case course.FieldDiscountPrice, course.FieldTotalHour, course.FieldSalePrice:
			values[i] = new(sql.NullFloat64)
		case course.FieldSaleType, course.FieldTeachingType, course.FieldCourseLevel, course.FieldPurchaseCnt, course.FieldPurchaseCounter, course.FieldClicks:
			values[i] = new(sql.NullInt64)
		case course.FieldID, course.FieldSecondCategory, course.FieldFirstCategoryName, course.FieldLecturerName, course.FieldBizCourseDetail, course.FieldCourseCover, course.FieldExt3, course.FieldExt2, course.FieldBizCourseChapters, course.FieldExt1, course.FieldBizCourseTeacher, course.FieldBizCourseAttachments, course.FieldTags, course.FieldCourseName, course.FieldCreateBy, course.FieldSecondCategoryName, course.FieldStatus:
			values[i] = new(sql.NullString)
		case course.FieldUpdateBy, course.FieldUpdateTime, course.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case course.FieldIsRecommend:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isRecommend", values[i])
			} else if value.Valid {
				c.IsRecommend = value.Bool
			}
		case course.FieldIsIntegral:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isIntegral", values[i])
			} else if value.Valid {
				c.IsIntegral = value.Bool
			}
		case course.FieldSecondCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondCategory", values[i])
			} else if value.Valid {
				c.SecondCategory = value.String
			}
		case course.FieldSaleType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saleType", values[i])
			} else if value.Valid {
				c.SaleType = int32(value.Int64)
			}
		case course.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discountPrice", values[i])
			} else if value.Valid {
				c.DiscountPrice = float32(value.Float64)
			}
		case course.FieldFirstCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstCategoryName", values[i])
			} else if value.Valid {
				c.FirstCategoryName = value.String
			}
		case course.FieldTeachingType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teachingType", values[i])
			} else if value.Valid {
				c.TeachingType = int32(value.Int64)
			}
		case course.FieldCourseLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field courseLevel", values[i])
			} else if value.Valid {
				c.CourseLevel = int32(value.Int64)
			}
		case course.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				c.UpdateBy = value.Time
			}
		case course.FieldLecturerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lecturerName", values[i])
			} else if value.Valid {
				c.LecturerName = value.String
			}
		case course.FieldPurchaseCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field purchaseCnt", values[i])
			} else if value.Valid {
				c.PurchaseCnt = int32(value.Int64)
			}
		case course.FieldTotalHour:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalHour", values[i])
			} else if value.Valid {
				c.TotalHour = float32(value.Float64)
			}
		case course.FieldBizCourseDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bizCourseDetail", values[i])
			} else if value.Valid {
				c.BizCourseDetail = value.String
			}
		case course.FieldCourseCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courseCover", values[i])
			} else if value.Valid {
				c.CourseCover = value.String
			}
		case course.FieldExt3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext3", values[i])
			} else if value.Valid {
				c.Ext3 = value.String
			}
		case course.FieldExt2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext2", values[i])
			} else if value.Valid {
				c.Ext2 = value.String
			}
		case course.FieldBizCourseChapters:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bizCourseChapters", values[i])
			} else if value.Valid {
				c.BizCourseChapters = value.String
			}
		case course.FieldExt1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext1", values[i])
			} else if value.Valid {
				c.Ext1 = value.String
			}
		case course.FieldSalePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field salePrice", values[i])
			} else if value.Valid {
				c.SalePrice = float32(value.Float64)
			}
		case course.FieldBizCourseTeacher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bizCourseTeacher", values[i])
			} else if value.Valid {
				c.BizCourseTeacher = value.String
			}
		case course.FieldBizCourseAttachments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bizCourseAttachments", values[i])
			} else if value.Valid {
				c.BizCourseAttachments = value.String
			}
		case course.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case course.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				c.Tags = value.String
			}
		case course.FieldCourseName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courseName", values[i])
			} else if value.Valid {
				c.CourseName = value.String
			}
		case course.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				c.CreateBy = value.String
			}
		case course.FieldPurchaseCounter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field purchaseCounter", values[i])
			} else if value.Valid {
				c.PurchaseCounter = int32(value.Int64)
			}
		case course.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case course.FieldClicks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clicks", values[i])
			} else if value.Valid {
				c.Clicks = int32(value.Int64)
			}
		case course.FieldSecondCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondCategoryName", values[i])
			} else if value.Valid {
				c.SecondCategoryName = value.String
			}
		case course.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Course.
// This includes values selected through modifiers, order, etc.
func (c *Course) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return NewCourseClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("isRecommend=")
	builder.WriteString(fmt.Sprintf("%v", c.IsRecommend))
	builder.WriteString(", ")
	builder.WriteString("isIntegral=")
	builder.WriteString(fmt.Sprintf("%v", c.IsIntegral))
	builder.WriteString(", ")
	builder.WriteString("secondCategory=")
	builder.WriteString(c.SecondCategory)
	builder.WriteString(", ")
	builder.WriteString("saleType=")
	builder.WriteString(fmt.Sprintf("%v", c.SaleType))
	builder.WriteString(", ")
	builder.WriteString("discountPrice=")
	builder.WriteString(fmt.Sprintf("%v", c.DiscountPrice))
	builder.WriteString(", ")
	builder.WriteString("firstCategoryName=")
	builder.WriteString(c.FirstCategoryName)
	builder.WriteString(", ")
	builder.WriteString("teachingType=")
	builder.WriteString(fmt.Sprintf("%v", c.TeachingType))
	builder.WriteString(", ")
	builder.WriteString("courseLevel=")
	builder.WriteString(fmt.Sprintf("%v", c.CourseLevel))
	builder.WriteString(", ")
	builder.WriteString("updateBy=")
	builder.WriteString(c.UpdateBy.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lecturerName=")
	builder.WriteString(c.LecturerName)
	builder.WriteString(", ")
	builder.WriteString("purchaseCnt=")
	builder.WriteString(fmt.Sprintf("%v", c.PurchaseCnt))
	builder.WriteString(", ")
	builder.WriteString("totalHour=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalHour))
	builder.WriteString(", ")
	builder.WriteString("bizCourseDetail=")
	builder.WriteString(c.BizCourseDetail)
	builder.WriteString(", ")
	builder.WriteString("courseCover=")
	builder.WriteString(c.CourseCover)
	builder.WriteString(", ")
	builder.WriteString("ext3=")
	builder.WriteString(c.Ext3)
	builder.WriteString(", ")
	builder.WriteString("ext2=")
	builder.WriteString(c.Ext2)
	builder.WriteString(", ")
	builder.WriteString("bizCourseChapters=")
	builder.WriteString(c.BizCourseChapters)
	builder.WriteString(", ")
	builder.WriteString("ext1=")
	builder.WriteString(c.Ext1)
	builder.WriteString(", ")
	builder.WriteString("salePrice=")
	builder.WriteString(fmt.Sprintf("%v", c.SalePrice))
	builder.WriteString(", ")
	builder.WriteString("bizCourseTeacher=")
	builder.WriteString(c.BizCourseTeacher)
	builder.WriteString(", ")
	builder.WriteString("bizCourseAttachments=")
	builder.WriteString(c.BizCourseAttachments)
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(c.Tags)
	builder.WriteString(", ")
	builder.WriteString("courseName=")
	builder.WriteString(c.CourseName)
	builder.WriteString(", ")
	builder.WriteString("createBy=")
	builder.WriteString(c.CreateBy)
	builder.WriteString(", ")
	builder.WriteString("purchaseCounter=")
	builder.WriteString(fmt.Sprintf("%v", c.PurchaseCounter))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("clicks=")
	builder.WriteString(fmt.Sprintf("%v", c.Clicks))
	builder.WriteString(", ")
	builder.WriteString("secondCategoryName=")
	builder.WriteString(c.SecondCategoryName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course
