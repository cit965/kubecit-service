// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/teacher"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeacherCreate is the builder for creating a Teacher entity.
type TeacherCreate struct {
	config
	mutation *TeacherMutation
	hooks    []Hook
}

// SetDetail sets the "detail" field.
func (tc *TeacherCreate) SetDetail(s string) *TeacherCreate {
	tc.mutation.SetDetail(s)
	return tc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableDetail(s *string) *TeacherCreate {
	if s != nil {
		tc.SetDetail(*s)
	}
	return tc
}

// SetCurriculumVitae sets the "curriculum_vitae" field.
func (tc *TeacherCreate) SetCurriculumVitae(s string) *TeacherCreate {
	tc.mutation.SetCurriculumVitae(s)
	return tc
}

// SetNillableCurriculumVitae sets the "curriculum_vitae" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableCurriculumVitae(s *string) *TeacherCreate {
	if s != nil {
		tc.SetCurriculumVitae(*s)
	}
	return tc
}

// SetWorks sets the "works" field.
func (tc *TeacherCreate) SetWorks(s string) *TeacherCreate {
	tc.mutation.SetWorks(s)
	return tc
}

// SetNillableWorks sets the "works" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableWorks(s *string) *TeacherCreate {
	if s != nil {
		tc.SetWorks(*s)
	}
	return tc
}

// SetSkills sets the "skills" field.
func (tc *TeacherCreate) SetSkills(s string) *TeacherCreate {
	tc.mutation.SetSkills(s)
	return tc
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableSkills(s *string) *TeacherCreate {
	if s != nil {
		tc.SetSkills(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TeacherCreate) SetName(s string) *TeacherCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetLevel sets the "level" field.
func (tc *TeacherCreate) SetLevel(i int) *TeacherCreate {
	tc.mutation.SetLevel(i)
	return tc
}

// SetAvator sets the "avator" field.
func (tc *TeacherCreate) SetAvator(s string) *TeacherCreate {
	tc.mutation.SetAvator(s)
	return tc
}

// SetNillableAvator sets the "avator" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableAvator(s *string) *TeacherCreate {
	if s != nil {
		tc.SetAvator(*s)
	}
	return tc
}

// SetCreateAt sets the "create_at" field.
func (tc *TeacherCreate) SetCreateAt(t time.Time) *TeacherCreate {
	tc.mutation.SetCreateAt(t)
	return tc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableCreateAt(t *time.Time) *TeacherCreate {
	if t != nil {
		tc.SetCreateAt(*t)
	}
	return tc
}

// SetUpdateAt sets the "update_at" field.
func (tc *TeacherCreate) SetUpdateAt(t time.Time) *TeacherCreate {
	tc.mutation.SetUpdateAt(t)
	return tc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tc *TeacherCreate) SetNillableUpdateAt(t *time.Time) *TeacherCreate {
	if t != nil {
		tc.SetUpdateAt(*t)
	}
	return tc
}

// Mutation returns the TeacherMutation object of the builder.
func (tc *TeacherCreate) Mutation() *TeacherMutation {
	return tc.mutation
}

// Save creates the Teacher in the database.
func (tc *TeacherCreate) Save(ctx context.Context) (*Teacher, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeacherCreate) SaveX(ctx context.Context) *Teacher {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeacherCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeacherCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TeacherCreate) defaults() {
	if _, ok := tc.mutation.CreateAt(); !ok {
		v := teacher.DefaultCreateAt()
		tc.mutation.SetCreateAt(v)
	}
	if _, ok := tc.mutation.UpdateAt(); !ok {
		v := teacher.DefaultUpdateAt()
		tc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeacherCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Teacher.name"`)}
	}
	if _, ok := tc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Teacher.level"`)}
	}
	if _, ok := tc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Teacher.create_at"`)}
	}
	if _, ok := tc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Teacher.update_at"`)}
	}
	return nil
}

func (tc *TeacherCreate) sqlSave(ctx context.Context) (*Teacher, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TeacherCreate) createSpec() (*Teacher, *sqlgraph.CreateSpec) {
	var (
		_node = &Teacher{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(teacher.Table, sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Detail(); ok {
		_spec.SetField(teacher.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := tc.mutation.CurriculumVitae(); ok {
		_spec.SetField(teacher.FieldCurriculumVitae, field.TypeString, value)
		_node.CurriculumVitae = value
	}
	if value, ok := tc.mutation.Works(); ok {
		_spec.SetField(teacher.FieldWorks, field.TypeString, value)
		_node.Works = value
	}
	if value, ok := tc.mutation.Skills(); ok {
		_spec.SetField(teacher.FieldSkills, field.TypeString, value)
		_node.Skills = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(teacher.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Level(); ok {
		_spec.SetField(teacher.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := tc.mutation.Avator(); ok {
		_spec.SetField(teacher.FieldAvator, field.TypeString, value)
		_node.Avator = value
	}
	if value, ok := tc.mutation.CreateAt(); ok {
		_spec.SetField(teacher.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := tc.mutation.UpdateAt(); ok {
		_spec.SetField(teacher.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// TeacherCreateBulk is the builder for creating many Teacher entities in bulk.
type TeacherCreateBulk struct {
	config
	builders []*TeacherCreate
}

// Save creates the Teacher entities in the database.
func (tcb *TeacherCreateBulk) Save(ctx context.Context) ([]*Teacher, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Teacher, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeacherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeacherCreateBulk) SaveX(ctx context.Context) []*Teacher {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeacherCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeacherCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
