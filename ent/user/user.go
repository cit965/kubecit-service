// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldSysCode holds the string denoting the syscode field in the database.
	FieldSysCode = "sys_code"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldHighestEducation holds the string denoting the highesteducation field in the database.
	FieldHighestEducation = "highest_education"
	// FieldIsEnable holds the string denoting the isenable field in the database.
	FieldIsEnable = "is_enable"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldPlatformAuthUser holds the string denoting the platformauthuser field in the database.
	FieldPlatformAuthUser = "platform_auth_user"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldTotalHour holds the string denoting the totalhour field in the database.
	FieldTotalHour = "total_hour"
	// FieldQq holds the string denoting the qq field in the database.
	FieldQq = "qq"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldEmergencyContact holds the string denoting the emergencycontact field in the database.
	FieldEmergencyContact = "emergency_contact"
	// FieldEmergencyContactNumber holds the string denoting the emergencycontactnumber field in the database.
	FieldEmergencyContactNumber = "emergency_contact_number"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldWechat holds the string denoting the wechat field in the database.
	FieldWechat = "wechat"
	// FieldRegSource holds the string denoting the regsource field in the database.
	FieldRegSource = "reg_source"
	// FieldTelephone holds the string denoting the telephone field in the database.
	FieldTelephone = "telephone"
	// FieldUpdateTime holds the string denoting the updatetime field in the database.
	FieldUpdateTime = "update_time"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldRealName holds the string denoting the realname field in the database.
	FieldRealName = "real_name"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// FieldPersonalSignature holds the string denoting the personalsignature field in the database.
	FieldPersonalSignature = "personal_signature"
	// FieldCertificateNumber holds the string denoting the certificatenumber field in the database.
	FieldCertificateNumber = "certificate_number"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldResidenceAddress holds the string denoting the residenceaddress field in the database.
	FieldResidenceAddress = "residence_address"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldCertificateType holds the string denoting the certificatetype field in the database.
	FieldCertificateType = "certificate_type"
	// EdgeVipMember holds the string denoting the vipmember edge name in mutations.
	EdgeVipMember = "vipMember"
	// Table holds the table name of the user in the database.
	Table = "users"
	// VipMemberTable is the table that holds the vipMember relation/edge.
	VipMemberTable = "members"
	// VipMemberInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	VipMemberInverseTable = "members"
	// VipMemberColumn is the table column denoting the vipMember relation/edge.
	VipMemberColumn = "user_vip_member"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldGender,
	FieldBirthday,
	FieldSysCode,
	FieldCity,
	FieldCountry,
	FieldHighestEducation,
	FieldIsEnable,
	FieldPassword,
	FieldProvince,
	FieldUpdateBy,
	FieldCreateBy,
	FieldPlatformAuthUser,
	FieldEmail,
	FieldTotalHour,
	FieldQq,
	FieldAddress,
	FieldNickName,
	FieldEmergencyContact,
	FieldEmergencyContactNumber,
	FieldMobile,
	FieldWechat,
	FieldRegSource,
	FieldTelephone,
	FieldUpdateTime,
	FieldAvatar,
	FieldRealName,
	FieldCreateTime,
	FieldPersonalSignature,
	FieldCertificateNumber,
	FieldAge,
	FieldResidenceAddress,
	FieldUsername,
	FieldCertificateType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// BySysCode orders the results by the sysCode field.
func BySysCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSysCode, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByHighestEducation orders the results by the highestEducation field.
func ByHighestEducation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHighestEducation, opts...).ToFunc()
}

// ByIsEnable orders the results by the isEnable field.
func ByIsEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnable, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByUpdateBy orders the results by the updateBy field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByCreateBy orders the results by the createBy field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByPlatformAuthUser orders the results by the platformAuthUser field.
func ByPlatformAuthUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformAuthUser, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByTotalHour orders the results by the totalHour field.
func ByTotalHour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalHour, opts...).ToFunc()
}

// ByQq orders the results by the qq field.
func ByQq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQq, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByNickName orders the results by the nickName field.
func ByNickName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickName, opts...).ToFunc()
}

// ByEmergencyContact orders the results by the emergencyContact field.
func ByEmergencyContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyContact, opts...).ToFunc()
}

// ByEmergencyContactNumber orders the results by the emergencyContactNumber field.
func ByEmergencyContactNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyContactNumber, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByWechat orders the results by the wechat field.
func ByWechat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWechat, opts...).ToFunc()
}

// ByRegSource orders the results by the regSource field.
func ByRegSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegSource, opts...).ToFunc()
}

// ByTelephone orders the results by the telephone field.
func ByTelephone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelephone, opts...).ToFunc()
}

// ByUpdateTime orders the results by the updateTime field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByRealName orders the results by the realName field.
func ByRealName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealName, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByPersonalSignature orders the results by the personalSignature field.
func ByPersonalSignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonalSignature, opts...).ToFunc()
}

// ByCertificateNumber orders the results by the certificateNumber field.
func ByCertificateNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificateNumber, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByResidenceAddress orders the results by the residenceAddress field.
func ByResidenceAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResidenceAddress, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByCertificateType orders the results by the certificateType field.
func ByCertificateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificateType, opts...).ToFunc()
}

// ByVipMemberCount orders the results by vipMember count.
func ByVipMemberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVipMemberStep(), opts...)
	}
}

// ByVipMember orders the results by vipMember terms.
func ByVipMember(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVipMemberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVipMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VipMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VipMemberTable, VipMemberColumn),
	)
}
