// Code generated by ent, DO NOT EDIT.

package user

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthday, v))
}

// SysCode applies equality check predicate on the "sysCode" field. It's identical to SysCodeEQ.
func SysCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSysCode, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountry, v))
}

// HighestEducation applies equality check predicate on the "highestEducation" field. It's identical to HighestEducationEQ.
func HighestEducation(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHighestEducation, v))
}

// IsEnable applies equality check predicate on the "isEnable" field. It's identical to IsEnableEQ.
func IsEnable(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsEnable, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvince, v))
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateBy, v))
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateBy, v))
}

// PlatformAuthUser applies equality check predicate on the "platformAuthUser" field. It's identical to PlatformAuthUserEQ.
func PlatformAuthUser(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformAuthUser, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// TotalHour applies equality check predicate on the "totalHour" field. It's identical to TotalHourEQ.
func TotalHour(v float32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalHour, v))
}

// Qq applies equality check predicate on the "qq" field. It's identical to QqEQ.
func Qq(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQq, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// NickName applies equality check predicate on the "nickName" field. It's identical to NickNameEQ.
func NickName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// EmergencyContact applies equality check predicate on the "emergencyContact" field. It's identical to EmergencyContactEQ.
func EmergencyContact(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyContact, v))
}

// EmergencyContactNumber applies equality check predicate on the "emergencyContactNumber" field. It's identical to EmergencyContactNumberEQ.
func EmergencyContactNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyContactNumber, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobile, v))
}

// Wechat applies equality check predicate on the "wechat" field. It's identical to WechatEQ.
func Wechat(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWechat, v))
}

// RegSource applies equality check predicate on the "regSource" field. It's identical to RegSourceEQ.
func RegSource(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegSource, v))
}

// Telephone applies equality check predicate on the "telephone" field. It's identical to TelephoneEQ.
func Telephone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelephone, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// RealName applies equality check predicate on the "realName" field. It's identical to RealNameEQ.
func RealName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRealName, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// PersonalSignature applies equality check predicate on the "personalSignature" field. It's identical to PersonalSignatureEQ.
func PersonalSignature(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPersonalSignature, v))
}

// CertificateNumber applies equality check predicate on the "certificateNumber" field. It's identical to CertificateNumberEQ.
func CertificateNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCertificateNumber, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// ResidenceAddress applies equality check predicate on the "residenceAddress" field. It's identical to ResidenceAddressEQ.
func ResidenceAddress(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResidenceAddress, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// CertificateType applies equality check predicate on the "certificateType" field. It's identical to CertificateTypeEQ.
func CertificateType(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCertificateType, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGender, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthday, v))
}

// SysCodeEQ applies the EQ predicate on the "sysCode" field.
func SysCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSysCode, v))
}

// SysCodeNEQ applies the NEQ predicate on the "sysCode" field.
func SysCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSysCode, v))
}

// SysCodeIn applies the In predicate on the "sysCode" field.
func SysCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSysCode, vs...))
}

// SysCodeNotIn applies the NotIn predicate on the "sysCode" field.
func SysCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSysCode, vs...))
}

// SysCodeGT applies the GT predicate on the "sysCode" field.
func SysCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSysCode, v))
}

// SysCodeGTE applies the GTE predicate on the "sysCode" field.
func SysCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSysCode, v))
}

// SysCodeLT applies the LT predicate on the "sysCode" field.
func SysCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSysCode, v))
}

// SysCodeLTE applies the LTE predicate on the "sysCode" field.
func SysCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSysCode, v))
}

// SysCodeContains applies the Contains predicate on the "sysCode" field.
func SysCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSysCode, v))
}

// SysCodeHasPrefix applies the HasPrefix predicate on the "sysCode" field.
func SysCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSysCode, v))
}

// SysCodeHasSuffix applies the HasSuffix predicate on the "sysCode" field.
func SysCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSysCode, v))
}

// SysCodeEqualFold applies the EqualFold predicate on the "sysCode" field.
func SysCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSysCode, v))
}

// SysCodeContainsFold applies the ContainsFold predicate on the "sysCode" field.
func SysCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSysCode, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCity, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCountry, v))
}

// HighestEducationEQ applies the EQ predicate on the "highestEducation" field.
func HighestEducationEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHighestEducation, v))
}

// HighestEducationNEQ applies the NEQ predicate on the "highestEducation" field.
func HighestEducationNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHighestEducation, v))
}

// HighestEducationIn applies the In predicate on the "highestEducation" field.
func HighestEducationIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHighestEducation, vs...))
}

// HighestEducationNotIn applies the NotIn predicate on the "highestEducation" field.
func HighestEducationNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHighestEducation, vs...))
}

// HighestEducationGT applies the GT predicate on the "highestEducation" field.
func HighestEducationGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHighestEducation, v))
}

// HighestEducationGTE applies the GTE predicate on the "highestEducation" field.
func HighestEducationGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHighestEducation, v))
}

// HighestEducationLT applies the LT predicate on the "highestEducation" field.
func HighestEducationLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHighestEducation, v))
}

// HighestEducationLTE applies the LTE predicate on the "highestEducation" field.
func HighestEducationLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHighestEducation, v))
}

// HighestEducationContains applies the Contains predicate on the "highestEducation" field.
func HighestEducationContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHighestEducation, v))
}

// HighestEducationHasPrefix applies the HasPrefix predicate on the "highestEducation" field.
func HighestEducationHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHighestEducation, v))
}

// HighestEducationHasSuffix applies the HasSuffix predicate on the "highestEducation" field.
func HighestEducationHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHighestEducation, v))
}

// HighestEducationEqualFold applies the EqualFold predicate on the "highestEducation" field.
func HighestEducationEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHighestEducation, v))
}

// HighestEducationContainsFold applies the ContainsFold predicate on the "highestEducation" field.
func HighestEducationContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHighestEducation, v))
}

// IsEnableEQ applies the EQ predicate on the "isEnable" field.
func IsEnableEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsEnable, v))
}

// IsEnableNEQ applies the NEQ predicate on the "isEnable" field.
func IsEnableNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsEnable, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProvince, v))
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByContains applies the Contains predicate on the "updateBy" field.
func UpdateByContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUpdateBy, v))
}

// UpdateByHasPrefix applies the HasPrefix predicate on the "updateBy" field.
func UpdateByHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUpdateBy, v))
}

// UpdateByHasSuffix applies the HasSuffix predicate on the "updateBy" field.
func UpdateByHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUpdateBy, v))
}

// UpdateByEqualFold applies the EqualFold predicate on the "updateBy" field.
func UpdateByEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUpdateBy, v))
}

// UpdateByContainsFold applies the ContainsFold predicate on the "updateBy" field.
func UpdateByContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUpdateBy, v))
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByContains applies the Contains predicate on the "createBy" field.
func CreateByContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCreateBy, v))
}

// CreateByHasPrefix applies the HasPrefix predicate on the "createBy" field.
func CreateByHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCreateBy, v))
}

// CreateByHasSuffix applies the HasSuffix predicate on the "createBy" field.
func CreateByHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCreateBy, v))
}

// CreateByEqualFold applies the EqualFold predicate on the "createBy" field.
func CreateByEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCreateBy, v))
}

// CreateByContainsFold applies the ContainsFold predicate on the "createBy" field.
func CreateByContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCreateBy, v))
}

// PlatformAuthUserEQ applies the EQ predicate on the "platformAuthUser" field.
func PlatformAuthUserEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlatformAuthUser, v))
}

// PlatformAuthUserNEQ applies the NEQ predicate on the "platformAuthUser" field.
func PlatformAuthUserNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlatformAuthUser, v))
}

// PlatformAuthUserIn applies the In predicate on the "platformAuthUser" field.
func PlatformAuthUserIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlatformAuthUser, vs...))
}

// PlatformAuthUserNotIn applies the NotIn predicate on the "platformAuthUser" field.
func PlatformAuthUserNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlatformAuthUser, vs...))
}

// PlatformAuthUserGT applies the GT predicate on the "platformAuthUser" field.
func PlatformAuthUserGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlatformAuthUser, v))
}

// PlatformAuthUserGTE applies the GTE predicate on the "platformAuthUser" field.
func PlatformAuthUserGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlatformAuthUser, v))
}

// PlatformAuthUserLT applies the LT predicate on the "platformAuthUser" field.
func PlatformAuthUserLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlatformAuthUser, v))
}

// PlatformAuthUserLTE applies the LTE predicate on the "platformAuthUser" field.
func PlatformAuthUserLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlatformAuthUser, v))
}

// PlatformAuthUserContains applies the Contains predicate on the "platformAuthUser" field.
func PlatformAuthUserContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlatformAuthUser, v))
}

// PlatformAuthUserHasPrefix applies the HasPrefix predicate on the "platformAuthUser" field.
func PlatformAuthUserHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlatformAuthUser, v))
}

// PlatformAuthUserHasSuffix applies the HasSuffix predicate on the "platformAuthUser" field.
func PlatformAuthUserHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlatformAuthUser, v))
}

// PlatformAuthUserEqualFold applies the EqualFold predicate on the "platformAuthUser" field.
func PlatformAuthUserEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlatformAuthUser, v))
}

// PlatformAuthUserContainsFold applies the ContainsFold predicate on the "platformAuthUser" field.
func PlatformAuthUserContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlatformAuthUser, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// TotalHourEQ applies the EQ predicate on the "totalHour" field.
func TotalHourEQ(v float32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalHour, v))
}

// TotalHourNEQ applies the NEQ predicate on the "totalHour" field.
func TotalHourNEQ(v float32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTotalHour, v))
}

// TotalHourIn applies the In predicate on the "totalHour" field.
func TotalHourIn(vs ...float32) predicate.User {
	return predicate.User(sql.FieldIn(FieldTotalHour, vs...))
}

// TotalHourNotIn applies the NotIn predicate on the "totalHour" field.
func TotalHourNotIn(vs ...float32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTotalHour, vs...))
}

// TotalHourGT applies the GT predicate on the "totalHour" field.
func TotalHourGT(v float32) predicate.User {
	return predicate.User(sql.FieldGT(FieldTotalHour, v))
}

// TotalHourGTE applies the GTE predicate on the "totalHour" field.
func TotalHourGTE(v float32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTotalHour, v))
}

// TotalHourLT applies the LT predicate on the "totalHour" field.
func TotalHourLT(v float32) predicate.User {
	return predicate.User(sql.FieldLT(FieldTotalHour, v))
}

// TotalHourLTE applies the LTE predicate on the "totalHour" field.
func TotalHourLTE(v float32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTotalHour, v))
}

// QqEQ applies the EQ predicate on the "qq" field.
func QqEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQq, v))
}

// QqNEQ applies the NEQ predicate on the "qq" field.
func QqNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQq, v))
}

// QqIn applies the In predicate on the "qq" field.
func QqIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldQq, vs...))
}

// QqNotIn applies the NotIn predicate on the "qq" field.
func QqNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQq, vs...))
}

// QqGT applies the GT predicate on the "qq" field.
func QqGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldQq, v))
}

// QqGTE applies the GTE predicate on the "qq" field.
func QqGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQq, v))
}

// QqLT applies the LT predicate on the "qq" field.
func QqLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldQq, v))
}

// QqLTE applies the LTE predicate on the "qq" field.
func QqLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQq, v))
}

// QqContains applies the Contains predicate on the "qq" field.
func QqContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldQq, v))
}

// QqHasPrefix applies the HasPrefix predicate on the "qq" field.
func QqHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldQq, v))
}

// QqHasSuffix applies the HasSuffix predicate on the "qq" field.
func QqHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldQq, v))
}

// QqEqualFold applies the EqualFold predicate on the "qq" field.
func QqEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldQq, v))
}

// QqContainsFold applies the ContainsFold predicate on the "qq" field.
func QqContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldQq, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAddress, v))
}

// NickNameEQ applies the EQ predicate on the "nickName" field.
func NickNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// NickNameNEQ applies the NEQ predicate on the "nickName" field.
func NickNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickName, v))
}

// NickNameIn applies the In predicate on the "nickName" field.
func NickNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickName, vs...))
}

// NickNameNotIn applies the NotIn predicate on the "nickName" field.
func NickNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickName, vs...))
}

// NickNameGT applies the GT predicate on the "nickName" field.
func NickNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickName, v))
}

// NickNameGTE applies the GTE predicate on the "nickName" field.
func NickNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickName, v))
}

// NickNameLT applies the LT predicate on the "nickName" field.
func NickNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickName, v))
}

// NickNameLTE applies the LTE predicate on the "nickName" field.
func NickNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickName, v))
}

// NickNameContains applies the Contains predicate on the "nickName" field.
func NickNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickName, v))
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nickName" field.
func NickNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickName, v))
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nickName" field.
func NickNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickName, v))
}

// NickNameEqualFold applies the EqualFold predicate on the "nickName" field.
func NickNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickName, v))
}

// NickNameContainsFold applies the ContainsFold predicate on the "nickName" field.
func NickNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickName, v))
}

// EmergencyContactEQ applies the EQ predicate on the "emergencyContact" field.
func EmergencyContactEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyContact, v))
}

// EmergencyContactNEQ applies the NEQ predicate on the "emergencyContact" field.
func EmergencyContactNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmergencyContact, v))
}

// EmergencyContactIn applies the In predicate on the "emergencyContact" field.
func EmergencyContactIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmergencyContact, vs...))
}

// EmergencyContactNotIn applies the NotIn predicate on the "emergencyContact" field.
func EmergencyContactNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmergencyContact, vs...))
}

// EmergencyContactGT applies the GT predicate on the "emergencyContact" field.
func EmergencyContactGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmergencyContact, v))
}

// EmergencyContactGTE applies the GTE predicate on the "emergencyContact" field.
func EmergencyContactGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmergencyContact, v))
}

// EmergencyContactLT applies the LT predicate on the "emergencyContact" field.
func EmergencyContactLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmergencyContact, v))
}

// EmergencyContactLTE applies the LTE predicate on the "emergencyContact" field.
func EmergencyContactLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmergencyContact, v))
}

// EmergencyContactContains applies the Contains predicate on the "emergencyContact" field.
func EmergencyContactContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmergencyContact, v))
}

// EmergencyContactHasPrefix applies the HasPrefix predicate on the "emergencyContact" field.
func EmergencyContactHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmergencyContact, v))
}

// EmergencyContactHasSuffix applies the HasSuffix predicate on the "emergencyContact" field.
func EmergencyContactHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmergencyContact, v))
}

// EmergencyContactEqualFold applies the EqualFold predicate on the "emergencyContact" field.
func EmergencyContactEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmergencyContact, v))
}

// EmergencyContactContainsFold applies the ContainsFold predicate on the "emergencyContact" field.
func EmergencyContactContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmergencyContact, v))
}

// EmergencyContactNumberEQ applies the EQ predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberNEQ applies the NEQ predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberIn applies the In predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmergencyContactNumber, vs...))
}

// EmergencyContactNumberNotIn applies the NotIn predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmergencyContactNumber, vs...))
}

// EmergencyContactNumberGT applies the GT predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberGTE applies the GTE predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberLT applies the LT predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberLTE applies the LTE predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberContains applies the Contains predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberHasPrefix applies the HasPrefix predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberHasSuffix applies the HasSuffix predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberEqualFold applies the EqualFold predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmergencyContactNumber, v))
}

// EmergencyContactNumberContainsFold applies the ContainsFold predicate on the "emergencyContactNumber" field.
func EmergencyContactNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmergencyContactNumber, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMobile, v))
}

// WechatEQ applies the EQ predicate on the "wechat" field.
func WechatEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWechat, v))
}

// WechatNEQ applies the NEQ predicate on the "wechat" field.
func WechatNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWechat, v))
}

// WechatIn applies the In predicate on the "wechat" field.
func WechatIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWechat, vs...))
}

// WechatNotIn applies the NotIn predicate on the "wechat" field.
func WechatNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWechat, vs...))
}

// WechatGT applies the GT predicate on the "wechat" field.
func WechatGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWechat, v))
}

// WechatGTE applies the GTE predicate on the "wechat" field.
func WechatGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWechat, v))
}

// WechatLT applies the LT predicate on the "wechat" field.
func WechatLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWechat, v))
}

// WechatLTE applies the LTE predicate on the "wechat" field.
func WechatLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWechat, v))
}

// WechatContains applies the Contains predicate on the "wechat" field.
func WechatContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWechat, v))
}

// WechatHasPrefix applies the HasPrefix predicate on the "wechat" field.
func WechatHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWechat, v))
}

// WechatHasSuffix applies the HasSuffix predicate on the "wechat" field.
func WechatHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWechat, v))
}

// WechatEqualFold applies the EqualFold predicate on the "wechat" field.
func WechatEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWechat, v))
}

// WechatContainsFold applies the ContainsFold predicate on the "wechat" field.
func WechatContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWechat, v))
}

// RegSourceEQ applies the EQ predicate on the "regSource" field.
func RegSourceEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegSource, v))
}

// RegSourceNEQ applies the NEQ predicate on the "regSource" field.
func RegSourceNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRegSource, v))
}

// RegSourceIn applies the In predicate on the "regSource" field.
func RegSourceIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldRegSource, vs...))
}

// RegSourceNotIn applies the NotIn predicate on the "regSource" field.
func RegSourceNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRegSource, vs...))
}

// RegSourceGT applies the GT predicate on the "regSource" field.
func RegSourceGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldRegSource, v))
}

// RegSourceGTE applies the GTE predicate on the "regSource" field.
func RegSourceGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRegSource, v))
}

// RegSourceLT applies the LT predicate on the "regSource" field.
func RegSourceLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldRegSource, v))
}

// RegSourceLTE applies the LTE predicate on the "regSource" field.
func RegSourceLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRegSource, v))
}

// TelephoneEQ applies the EQ predicate on the "telephone" field.
func TelephoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelephone, v))
}

// TelephoneNEQ applies the NEQ predicate on the "telephone" field.
func TelephoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTelephone, v))
}

// TelephoneIn applies the In predicate on the "telephone" field.
func TelephoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTelephone, vs...))
}

// TelephoneNotIn applies the NotIn predicate on the "telephone" field.
func TelephoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTelephone, vs...))
}

// TelephoneGT applies the GT predicate on the "telephone" field.
func TelephoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTelephone, v))
}

// TelephoneGTE applies the GTE predicate on the "telephone" field.
func TelephoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTelephone, v))
}

// TelephoneLT applies the LT predicate on the "telephone" field.
func TelephoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTelephone, v))
}

// TelephoneLTE applies the LTE predicate on the "telephone" field.
func TelephoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTelephone, v))
}

// TelephoneContains applies the Contains predicate on the "telephone" field.
func TelephoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTelephone, v))
}

// TelephoneHasPrefix applies the HasPrefix predicate on the "telephone" field.
func TelephoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTelephone, v))
}

// TelephoneHasSuffix applies the HasSuffix predicate on the "telephone" field.
func TelephoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTelephone, v))
}

// TelephoneEqualFold applies the EqualFold predicate on the "telephone" field.
func TelephoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTelephone, v))
}

// TelephoneContainsFold applies the ContainsFold predicate on the "telephone" field.
func TelephoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTelephone, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// RealNameEQ applies the EQ predicate on the "realName" field.
func RealNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRealName, v))
}

// RealNameNEQ applies the NEQ predicate on the "realName" field.
func RealNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRealName, v))
}

// RealNameIn applies the In predicate on the "realName" field.
func RealNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRealName, vs...))
}

// RealNameNotIn applies the NotIn predicate on the "realName" field.
func RealNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRealName, vs...))
}

// RealNameGT applies the GT predicate on the "realName" field.
func RealNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRealName, v))
}

// RealNameGTE applies the GTE predicate on the "realName" field.
func RealNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRealName, v))
}

// RealNameLT applies the LT predicate on the "realName" field.
func RealNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRealName, v))
}

// RealNameLTE applies the LTE predicate on the "realName" field.
func RealNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRealName, v))
}

// RealNameContains applies the Contains predicate on the "realName" field.
func RealNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRealName, v))
}

// RealNameHasPrefix applies the HasPrefix predicate on the "realName" field.
func RealNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRealName, v))
}

// RealNameHasSuffix applies the HasSuffix predicate on the "realName" field.
func RealNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRealName, v))
}

// RealNameEqualFold applies the EqualFold predicate on the "realName" field.
func RealNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRealName, v))
}

// RealNameContainsFold applies the ContainsFold predicate on the "realName" field.
func RealNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRealName, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// PersonalSignatureEQ applies the EQ predicate on the "personalSignature" field.
func PersonalSignatureEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPersonalSignature, v))
}

// PersonalSignatureNEQ applies the NEQ predicate on the "personalSignature" field.
func PersonalSignatureNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPersonalSignature, v))
}

// PersonalSignatureIn applies the In predicate on the "personalSignature" field.
func PersonalSignatureIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPersonalSignature, vs...))
}

// PersonalSignatureNotIn applies the NotIn predicate on the "personalSignature" field.
func PersonalSignatureNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPersonalSignature, vs...))
}

// PersonalSignatureGT applies the GT predicate on the "personalSignature" field.
func PersonalSignatureGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPersonalSignature, v))
}

// PersonalSignatureGTE applies the GTE predicate on the "personalSignature" field.
func PersonalSignatureGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPersonalSignature, v))
}

// PersonalSignatureLT applies the LT predicate on the "personalSignature" field.
func PersonalSignatureLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPersonalSignature, v))
}

// PersonalSignatureLTE applies the LTE predicate on the "personalSignature" field.
func PersonalSignatureLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPersonalSignature, v))
}

// PersonalSignatureContains applies the Contains predicate on the "personalSignature" field.
func PersonalSignatureContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPersonalSignature, v))
}

// PersonalSignatureHasPrefix applies the HasPrefix predicate on the "personalSignature" field.
func PersonalSignatureHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPersonalSignature, v))
}

// PersonalSignatureHasSuffix applies the HasSuffix predicate on the "personalSignature" field.
func PersonalSignatureHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPersonalSignature, v))
}

// PersonalSignatureEqualFold applies the EqualFold predicate on the "personalSignature" field.
func PersonalSignatureEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPersonalSignature, v))
}

// PersonalSignatureContainsFold applies the ContainsFold predicate on the "personalSignature" field.
func PersonalSignatureContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPersonalSignature, v))
}

// CertificateNumberEQ applies the EQ predicate on the "certificateNumber" field.
func CertificateNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCertificateNumber, v))
}

// CertificateNumberNEQ applies the NEQ predicate on the "certificateNumber" field.
func CertificateNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCertificateNumber, v))
}

// CertificateNumberIn applies the In predicate on the "certificateNumber" field.
func CertificateNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCertificateNumber, vs...))
}

// CertificateNumberNotIn applies the NotIn predicate on the "certificateNumber" field.
func CertificateNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCertificateNumber, vs...))
}

// CertificateNumberGT applies the GT predicate on the "certificateNumber" field.
func CertificateNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCertificateNumber, v))
}

// CertificateNumberGTE applies the GTE predicate on the "certificateNumber" field.
func CertificateNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCertificateNumber, v))
}

// CertificateNumberLT applies the LT predicate on the "certificateNumber" field.
func CertificateNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCertificateNumber, v))
}

// CertificateNumberLTE applies the LTE predicate on the "certificateNumber" field.
func CertificateNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCertificateNumber, v))
}

// CertificateNumberContains applies the Contains predicate on the "certificateNumber" field.
func CertificateNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCertificateNumber, v))
}

// CertificateNumberHasPrefix applies the HasPrefix predicate on the "certificateNumber" field.
func CertificateNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCertificateNumber, v))
}

// CertificateNumberHasSuffix applies the HasSuffix predicate on the "certificateNumber" field.
func CertificateNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCertificateNumber, v))
}

// CertificateNumberEqualFold applies the EqualFold predicate on the "certificateNumber" field.
func CertificateNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCertificateNumber, v))
}

// CertificateNumberContainsFold applies the ContainsFold predicate on the "certificateNumber" field.
func CertificateNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCertificateNumber, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAge, v))
}

// ResidenceAddressEQ applies the EQ predicate on the "residenceAddress" field.
func ResidenceAddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResidenceAddress, v))
}

// ResidenceAddressNEQ applies the NEQ predicate on the "residenceAddress" field.
func ResidenceAddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldResidenceAddress, v))
}

// ResidenceAddressIn applies the In predicate on the "residenceAddress" field.
func ResidenceAddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldResidenceAddress, vs...))
}

// ResidenceAddressNotIn applies the NotIn predicate on the "residenceAddress" field.
func ResidenceAddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldResidenceAddress, vs...))
}

// ResidenceAddressGT applies the GT predicate on the "residenceAddress" field.
func ResidenceAddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldResidenceAddress, v))
}

// ResidenceAddressGTE applies the GTE predicate on the "residenceAddress" field.
func ResidenceAddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldResidenceAddress, v))
}

// ResidenceAddressLT applies the LT predicate on the "residenceAddress" field.
func ResidenceAddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldResidenceAddress, v))
}

// ResidenceAddressLTE applies the LTE predicate on the "residenceAddress" field.
func ResidenceAddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldResidenceAddress, v))
}

// ResidenceAddressContains applies the Contains predicate on the "residenceAddress" field.
func ResidenceAddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldResidenceAddress, v))
}

// ResidenceAddressHasPrefix applies the HasPrefix predicate on the "residenceAddress" field.
func ResidenceAddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldResidenceAddress, v))
}

// ResidenceAddressHasSuffix applies the HasSuffix predicate on the "residenceAddress" field.
func ResidenceAddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldResidenceAddress, v))
}

// ResidenceAddressEqualFold applies the EqualFold predicate on the "residenceAddress" field.
func ResidenceAddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldResidenceAddress, v))
}

// ResidenceAddressContainsFold applies the ContainsFold predicate on the "residenceAddress" field.
func ResidenceAddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldResidenceAddress, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// CertificateTypeEQ applies the EQ predicate on the "certificateType" field.
func CertificateTypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCertificateType, v))
}

// CertificateTypeNEQ applies the NEQ predicate on the "certificateType" field.
func CertificateTypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCertificateType, v))
}

// CertificateTypeIn applies the In predicate on the "certificateType" field.
func CertificateTypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCertificateType, vs...))
}

// CertificateTypeNotIn applies the NotIn predicate on the "certificateType" field.
func CertificateTypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCertificateType, vs...))
}

// CertificateTypeGT applies the GT predicate on the "certificateType" field.
func CertificateTypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCertificateType, v))
}

// CertificateTypeGTE applies the GTE predicate on the "certificateType" field.
func CertificateTypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCertificateType, v))
}

// CertificateTypeLT applies the LT predicate on the "certificateType" field.
func CertificateTypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCertificateType, v))
}

// CertificateTypeLTE applies the LTE predicate on the "certificateType" field.
func CertificateTypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCertificateType, v))
}

// CertificateTypeContains applies the Contains predicate on the "certificateType" field.
func CertificateTypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCertificateType, v))
}

// CertificateTypeHasPrefix applies the HasPrefix predicate on the "certificateType" field.
func CertificateTypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCertificateType, v))
}

// CertificateTypeHasSuffix applies the HasSuffix predicate on the "certificateType" field.
func CertificateTypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCertificateType, v))
}

// CertificateTypeEqualFold applies the EqualFold predicate on the "certificateType" field.
func CertificateTypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCertificateType, v))
}

// CertificateTypeContainsFold applies the ContainsFold predicate on the "certificateType" field.
func CertificateTypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCertificateType, v))
}

// HasVipMember applies the HasEdge predicate on the "vipMember" edge.
func HasVipMember() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VipMemberTable, VipMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVipMemberWith applies the HasEdge predicate on the "vipMember" edge with a given conditions (other predicates).
func HasVipMemberWith(preds ...predicate.Member) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newVipMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
