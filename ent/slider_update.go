// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/slider"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SliderUpdate is the builder for updating Slider entities.
type SliderUpdate struct {
	config
	hooks    []Hook
	mutation *SliderMutation
}

// Where appends a list predicates to the SliderUpdate builder.
func (su *SliderUpdate) Where(ps ...predicate.Slider) *SliderUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreateBy sets the "createBy" field.
func (su *SliderUpdate) SetCreateBy(s string) *SliderUpdate {
	su.mutation.SetCreateBy(s)
	return su
}

// SetImageName sets the "imageName" field.
func (su *SliderUpdate) SetImageName(s string) *SliderUpdate {
	su.mutation.SetImageName(s)
	return su
}

// SetCreateTime sets the "createTime" field.
func (su *SliderUpdate) SetCreateTime(t time.Time) *SliderUpdate {
	su.mutation.SetCreateTime(t)
	return su
}

// SetUpdateBy sets the "updateBy" field.
func (su *SliderUpdate) SetUpdateBy(s string) *SliderUpdate {
	su.mutation.SetUpdateBy(s)
	return su
}

// SetImageRemark sets the "imageRemark" field.
func (su *SliderUpdate) SetImageRemark(s string) *SliderUpdate {
	su.mutation.SetImageRemark(s)
	return su
}

// SetImageUrl sets the "imageUrl" field.
func (su *SliderUpdate) SetImageUrl(s string) *SliderUpdate {
	su.mutation.SetImageUrl(s)
	return su
}

// SetPcHref sets the "pcHref" field.
func (su *SliderUpdate) SetPcHref(s string) *SliderUpdate {
	su.mutation.SetPcHref(s)
	return su
}

// SetUpdateTime sets the "updateTime" field.
func (su *SliderUpdate) SetUpdateTime(t time.Time) *SliderUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetAppHref sets the "appHref" field.
func (su *SliderUpdate) SetAppHref(s string) *SliderUpdate {
	su.mutation.SetAppHref(s)
	return su
}

// Mutation returns the SliderMutation object of the builder.
func (su *SliderUpdate) Mutation() *SliderMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SliderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SliderUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SliderUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SliderUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SliderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(slider.Table, slider.Columns, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreateBy(); ok {
		_spec.SetField(slider.FieldCreateBy, field.TypeString, value)
	}
	if value, ok := su.mutation.ImageName(); ok {
		_spec.SetField(slider.FieldImageName, field.TypeString, value)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(slider.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateBy(); ok {
		_spec.SetField(slider.FieldUpdateBy, field.TypeString, value)
	}
	if value, ok := su.mutation.ImageRemark(); ok {
		_spec.SetField(slider.FieldImageRemark, field.TypeString, value)
	}
	if value, ok := su.mutation.ImageUrl(); ok {
		_spec.SetField(slider.FieldImageUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.PcHref(); ok {
		_spec.SetField(slider.FieldPcHref, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(slider.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.AppHref(); ok {
		_spec.SetField(slider.FieldAppHref, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SliderUpdateOne is the builder for updating a single Slider entity.
type SliderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SliderMutation
}

// SetCreateBy sets the "createBy" field.
func (suo *SliderUpdateOne) SetCreateBy(s string) *SliderUpdateOne {
	suo.mutation.SetCreateBy(s)
	return suo
}

// SetImageName sets the "imageName" field.
func (suo *SliderUpdateOne) SetImageName(s string) *SliderUpdateOne {
	suo.mutation.SetImageName(s)
	return suo
}

// SetCreateTime sets the "createTime" field.
func (suo *SliderUpdateOne) SetCreateTime(t time.Time) *SliderUpdateOne {
	suo.mutation.SetCreateTime(t)
	return suo
}

// SetUpdateBy sets the "updateBy" field.
func (suo *SliderUpdateOne) SetUpdateBy(s string) *SliderUpdateOne {
	suo.mutation.SetUpdateBy(s)
	return suo
}

// SetImageRemark sets the "imageRemark" field.
func (suo *SliderUpdateOne) SetImageRemark(s string) *SliderUpdateOne {
	suo.mutation.SetImageRemark(s)
	return suo
}

// SetImageUrl sets the "imageUrl" field.
func (suo *SliderUpdateOne) SetImageUrl(s string) *SliderUpdateOne {
	suo.mutation.SetImageUrl(s)
	return suo
}

// SetPcHref sets the "pcHref" field.
func (suo *SliderUpdateOne) SetPcHref(s string) *SliderUpdateOne {
	suo.mutation.SetPcHref(s)
	return suo
}

// SetUpdateTime sets the "updateTime" field.
func (suo *SliderUpdateOne) SetUpdateTime(t time.Time) *SliderUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetAppHref sets the "appHref" field.
func (suo *SliderUpdateOne) SetAppHref(s string) *SliderUpdateOne {
	suo.mutation.SetAppHref(s)
	return suo
}

// Mutation returns the SliderMutation object of the builder.
func (suo *SliderUpdateOne) Mutation() *SliderMutation {
	return suo.mutation
}

// Where appends a list predicates to the SliderUpdate builder.
func (suo *SliderUpdateOne) Where(ps ...predicate.Slider) *SliderUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SliderUpdateOne) Select(field string, fields ...string) *SliderUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Slider entity.
func (suo *SliderUpdateOne) Save(ctx context.Context) (*Slider, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SliderUpdateOne) SaveX(ctx context.Context) *Slider {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SliderUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SliderUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SliderUpdateOne) sqlSave(ctx context.Context) (_node *Slider, err error) {
	_spec := sqlgraph.NewUpdateSpec(slider.Table, slider.Columns, sqlgraph.NewFieldSpec(slider.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Slider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slider.FieldID)
		for _, f := range fields {
			if !slider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreateBy(); ok {
		_spec.SetField(slider.FieldCreateBy, field.TypeString, value)
	}
	if value, ok := suo.mutation.ImageName(); ok {
		_spec.SetField(slider.FieldImageName, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(slider.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateBy(); ok {
		_spec.SetField(slider.FieldUpdateBy, field.TypeString, value)
	}
	if value, ok := suo.mutation.ImageRemark(); ok {
		_spec.SetField(slider.FieldImageRemark, field.TypeString, value)
	}
	if value, ok := suo.mutation.ImageUrl(); ok {
		_spec.SetField(slider.FieldImageUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.PcHref(); ok {
		_spec.SetField(slider.FieldPcHref, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(slider.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.AppHref(); ok {
		_spec.SetField(slider.FieldAppHref, field.TypeString, value)
	}
	_node = &Slider{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
