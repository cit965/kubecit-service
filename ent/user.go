// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int32 `json:"gender,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// SysCode holds the value of the "sysCode" field.
	SysCode string `json:"sysCode,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// HighestEducation holds the value of the "highestEducation" field.
	HighestEducation string `json:"highestEducation,omitempty"`
	// IsEnable holds the value of the "isEnable" field.
	IsEnable bool `json:"isEnable,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Province holds the value of the "province" field.
	Province string `json:"province,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	UpdateBy string `json:"updateBy,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	CreateBy string `json:"createBy,omitempty"`
	// PlatformAuthUser holds the value of the "platformAuthUser" field.
	PlatformAuthUser string `json:"platformAuthUser,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// TotalHour holds the value of the "totalHour" field.
	TotalHour float32 `json:"totalHour,omitempty"`
	// Qq holds the value of the "qq" field.
	Qq string `json:"qq,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// NickName holds the value of the "nickName" field.
	NickName string `json:"nickName,omitempty"`
	// EmergencyContact holds the value of the "emergencyContact" field.
	EmergencyContact string `json:"emergencyContact,omitempty"`
	// EmergencyContactNumber holds the value of the "emergencyContactNumber" field.
	EmergencyContactNumber string `json:"emergencyContactNumber,omitempty"`
	// Mobile holds the value of the "mobile" field.
	Mobile string `json:"mobile,omitempty"`
	// Wechat holds the value of the "wechat" field.
	Wechat string `json:"wechat,omitempty"`
	// RegSource holds the value of the "regSource" field.
	RegSource int32 `json:"regSource,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// UpdateTime holds the value of the "updateTime" field.
	UpdateTime time.Time `json:"updateTime,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// RealName holds the value of the "realName" field.
	RealName string `json:"realName,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime time.Time `json:"createTime,omitempty"`
	// PersonalSignature holds the value of the "personalSignature" field.
	PersonalSignature string `json:"personalSignature,omitempty"`
	// CertificateNumber holds the value of the "certificateNumber" field.
	CertificateNumber string `json:"certificateNumber,omitempty"`
	// Age holds the value of the "age" field.
	Age int32 `json:"age,omitempty"`
	// ResidenceAddress holds the value of the "residenceAddress" field.
	ResidenceAddress string `json:"residenceAddress,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// CertificateType holds the value of the "certificateType" field.
	CertificateType string `json:"certificateType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// VipMember holds the value of the vipMember edge.
	VipMember []*Member `json:"vipMember,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VipMemberOrErr returns the VipMember value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VipMemberOrErr() ([]*Member, error) {
	if e.loadedTypes[0] {
		return e.VipMember, nil
	}
	return nil, &NotLoadedError{edge: "vipMember"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case user.FieldTotalHour:
			values[i] = new(sql.NullFloat64)
		case user.FieldGender, user.FieldRegSource, user.FieldAge:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldSysCode, user.FieldCity, user.FieldCountry, user.FieldHighestEducation, user.FieldPassword, user.FieldProvince, user.FieldUpdateBy, user.FieldCreateBy, user.FieldPlatformAuthUser, user.FieldEmail, user.FieldQq, user.FieldAddress, user.FieldNickName, user.FieldEmergencyContact, user.FieldEmergencyContactNumber, user.FieldMobile, user.FieldWechat, user.FieldTelephone, user.FieldAvatar, user.FieldRealName, user.FieldPersonalSignature, user.FieldCertificateNumber, user.FieldResidenceAddress, user.FieldUsername, user.FieldCertificateType:
			values[i] = new(sql.NullString)
		case user.FieldBirthday, user.FieldUpdateTime, user.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				u.Gender = int32(value.Int64)
			}
		case user.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				u.Birthday = value.Time
			}
		case user.FieldSysCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sysCode", values[i])
			} else if value.Valid {
				u.SysCode = value.String
			}
		case user.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				u.City = value.String
			}
		case user.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				u.Country = value.String
			}
		case user.FieldHighestEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field highestEducation", values[i])
			} else if value.Valid {
				u.HighestEducation = value.String
			}
		case user.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isEnable", values[i])
			} else if value.Valid {
				u.IsEnable = value.Bool
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				u.Province = value.String
			}
		case user.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				u.UpdateBy = value.String
			}
		case user.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				u.CreateBy = value.String
			}
		case user.FieldPlatformAuthUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platformAuthUser", values[i])
			} else if value.Valid {
				u.PlatformAuthUser = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldTotalHour:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalHour", values[i])
			} else if value.Valid {
				u.TotalHour = float32(value.Float64)
			}
		case user.FieldQq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qq", values[i])
			} else if value.Valid {
				u.Qq = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		case user.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickName", values[i])
			} else if value.Valid {
				u.NickName = value.String
			}
		case user.FieldEmergencyContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emergencyContact", values[i])
			} else if value.Valid {
				u.EmergencyContact = value.String
			}
		case user.FieldEmergencyContactNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emergencyContactNumber", values[i])
			} else if value.Valid {
				u.EmergencyContactNumber = value.String
			}
		case user.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				u.Mobile = value.String
			}
		case user.FieldWechat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wechat", values[i])
			} else if value.Valid {
				u.Wechat = value.String
			}
		case user.FieldRegSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field regSource", values[i])
			} else if value.Valid {
				u.RegSource = int32(value.Int64)
			}
		case user.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				u.Telephone = value.String
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field realName", values[i])
			} else if value.Valid {
				u.RealName = value.String
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldPersonalSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field personalSignature", values[i])
			} else if value.Valid {
				u.PersonalSignature = value.String
			}
		case user.FieldCertificateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificateNumber", values[i])
			} else if value.Valid {
				u.CertificateNumber = value.String
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = int32(value.Int64)
			}
		case user.FieldResidenceAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field residenceAddress", values[i])
			} else if value.Valid {
				u.ResidenceAddress = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldCertificateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificateType", values[i])
			} else if value.Valid {
				u.CertificateType = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryVipMember queries the "vipMember" edge of the User entity.
func (u *User) QueryVipMember() *MemberQuery {
	return NewUserClient(u.config).QueryVipMember(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(u.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sysCode=")
	builder.WriteString(u.SysCode)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(u.City)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(u.Country)
	builder.WriteString(", ")
	builder.WriteString("highestEducation=")
	builder.WriteString(u.HighestEducation)
	builder.WriteString(", ")
	builder.WriteString("isEnable=")
	builder.WriteString(fmt.Sprintf("%v", u.IsEnable))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(u.Province)
	builder.WriteString(", ")
	builder.WriteString("updateBy=")
	builder.WriteString(u.UpdateBy)
	builder.WriteString(", ")
	builder.WriteString("createBy=")
	builder.WriteString(u.CreateBy)
	builder.WriteString(", ")
	builder.WriteString("platformAuthUser=")
	builder.WriteString(u.PlatformAuthUser)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("totalHour=")
	builder.WriteString(fmt.Sprintf("%v", u.TotalHour))
	builder.WriteString(", ")
	builder.WriteString("qq=")
	builder.WriteString(u.Qq)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteString(", ")
	builder.WriteString("nickName=")
	builder.WriteString(u.NickName)
	builder.WriteString(", ")
	builder.WriteString("emergencyContact=")
	builder.WriteString(u.EmergencyContact)
	builder.WriteString(", ")
	builder.WriteString("emergencyContactNumber=")
	builder.WriteString(u.EmergencyContactNumber)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(u.Mobile)
	builder.WriteString(", ")
	builder.WriteString("wechat=")
	builder.WriteString(u.Wechat)
	builder.WriteString(", ")
	builder.WriteString("regSource=")
	builder.WriteString(fmt.Sprintf("%v", u.RegSource))
	builder.WriteString(", ")
	builder.WriteString("telephone=")
	builder.WriteString(u.Telephone)
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("realName=")
	builder.WriteString(u.RealName)
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("personalSignature=")
	builder.WriteString(u.PersonalSignature)
	builder.WriteString(", ")
	builder.WriteString("certificateNumber=")
	builder.WriteString(u.CertificateNumber)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", ")
	builder.WriteString("residenceAddress=")
	builder.WriteString(u.ResidenceAddress)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("certificateType=")
	builder.WriteString(u.CertificateType)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
