// Code generated by ent, DO NOT EDIT.

package teacher

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the teacher type in the database.
	Label = "teacher"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldCurriculumVitae holds the string denoting the curriculum_vitae field in the database.
	FieldCurriculumVitae = "curriculum_vitae"
	// FieldWorks holds the string denoting the works field in the database.
	FieldWorks = "works"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldAvator holds the string denoting the avator field in the database.
	FieldAvator = "avator"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the teacher in the database.
	Table = "teachers"
)

// Columns holds all SQL columns for teacher fields.
var Columns = []string{
	FieldID,
	FieldDetail,
	FieldCurriculumVitae,
	FieldWorks,
	FieldSkills,
	FieldName,
	FieldLevel,
	FieldAvator,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
)

// OrderOption defines the ordering options for the Teacher queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDetail orders the results by the detail field.
func ByDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetail, opts...).ToFunc()
}

// ByCurriculumVitae orders the results by the curriculum_vitae field.
func ByCurriculumVitae(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurriculumVitae, opts...).ToFunc()
}

// ByWorks orders the results by the works field.
func ByWorks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorks, opts...).ToFunc()
}

// BySkills orders the results by the skills field.
func BySkills(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkills, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByAvator orders the results by the avator field.
func ByAvator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvator, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
