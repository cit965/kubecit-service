// Code generated by ent, DO NOT EDIT.

package teacher

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldID, id))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldDetail, v))
}

// CurriculumVitae applies equality check predicate on the "curriculum_vitae" field. It's identical to CurriculumVitaeEQ.
func CurriculumVitae(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCurriculumVitae, v))
}

// Works applies equality check predicate on the "works" field. It's identical to WorksEQ.
func Works(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldWorks, v))
}

// Skills applies equality check predicate on the "skills" field. It's identical to SkillsEQ.
func Skills(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldSkills, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldLevel, v))
}

// Avator applies equality check predicate on the "avator" field. It's identical to AvatorEQ.
func Avator(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldAvator, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldUpdateAt, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldDetail))
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldDetail))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldDetail, v))
}

// CurriculumVitaeEQ applies the EQ predicate on the "curriculum_vitae" field.
func CurriculumVitaeEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCurriculumVitae, v))
}

// CurriculumVitaeNEQ applies the NEQ predicate on the "curriculum_vitae" field.
func CurriculumVitaeNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldCurriculumVitae, v))
}

// CurriculumVitaeIn applies the In predicate on the "curriculum_vitae" field.
func CurriculumVitaeIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldCurriculumVitae, vs...))
}

// CurriculumVitaeNotIn applies the NotIn predicate on the "curriculum_vitae" field.
func CurriculumVitaeNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldCurriculumVitae, vs...))
}

// CurriculumVitaeGT applies the GT predicate on the "curriculum_vitae" field.
func CurriculumVitaeGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldCurriculumVitae, v))
}

// CurriculumVitaeGTE applies the GTE predicate on the "curriculum_vitae" field.
func CurriculumVitaeGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldCurriculumVitae, v))
}

// CurriculumVitaeLT applies the LT predicate on the "curriculum_vitae" field.
func CurriculumVitaeLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldCurriculumVitae, v))
}

// CurriculumVitaeLTE applies the LTE predicate on the "curriculum_vitae" field.
func CurriculumVitaeLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldCurriculumVitae, v))
}

// CurriculumVitaeContains applies the Contains predicate on the "curriculum_vitae" field.
func CurriculumVitaeContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldCurriculumVitae, v))
}

// CurriculumVitaeHasPrefix applies the HasPrefix predicate on the "curriculum_vitae" field.
func CurriculumVitaeHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldCurriculumVitae, v))
}

// CurriculumVitaeHasSuffix applies the HasSuffix predicate on the "curriculum_vitae" field.
func CurriculumVitaeHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldCurriculumVitae, v))
}

// CurriculumVitaeIsNil applies the IsNil predicate on the "curriculum_vitae" field.
func CurriculumVitaeIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldCurriculumVitae))
}

// CurriculumVitaeNotNil applies the NotNil predicate on the "curriculum_vitae" field.
func CurriculumVitaeNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldCurriculumVitae))
}

// CurriculumVitaeEqualFold applies the EqualFold predicate on the "curriculum_vitae" field.
func CurriculumVitaeEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldCurriculumVitae, v))
}

// CurriculumVitaeContainsFold applies the ContainsFold predicate on the "curriculum_vitae" field.
func CurriculumVitaeContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldCurriculumVitae, v))
}

// WorksEQ applies the EQ predicate on the "works" field.
func WorksEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldWorks, v))
}

// WorksNEQ applies the NEQ predicate on the "works" field.
func WorksNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldWorks, v))
}

// WorksIn applies the In predicate on the "works" field.
func WorksIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldWorks, vs...))
}

// WorksNotIn applies the NotIn predicate on the "works" field.
func WorksNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldWorks, vs...))
}

// WorksGT applies the GT predicate on the "works" field.
func WorksGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldWorks, v))
}

// WorksGTE applies the GTE predicate on the "works" field.
func WorksGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldWorks, v))
}

// WorksLT applies the LT predicate on the "works" field.
func WorksLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldWorks, v))
}

// WorksLTE applies the LTE predicate on the "works" field.
func WorksLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldWorks, v))
}

// WorksContains applies the Contains predicate on the "works" field.
func WorksContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldWorks, v))
}

// WorksHasPrefix applies the HasPrefix predicate on the "works" field.
func WorksHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldWorks, v))
}

// WorksHasSuffix applies the HasSuffix predicate on the "works" field.
func WorksHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldWorks, v))
}

// WorksIsNil applies the IsNil predicate on the "works" field.
func WorksIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldWorks))
}

// WorksNotNil applies the NotNil predicate on the "works" field.
func WorksNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldWorks))
}

// WorksEqualFold applies the EqualFold predicate on the "works" field.
func WorksEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldWorks, v))
}

// WorksContainsFold applies the ContainsFold predicate on the "works" field.
func WorksContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldWorks, v))
}

// SkillsEQ applies the EQ predicate on the "skills" field.
func SkillsEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldSkills, v))
}

// SkillsNEQ applies the NEQ predicate on the "skills" field.
func SkillsNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldSkills, v))
}

// SkillsIn applies the In predicate on the "skills" field.
func SkillsIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldSkills, vs...))
}

// SkillsNotIn applies the NotIn predicate on the "skills" field.
func SkillsNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldSkills, vs...))
}

// SkillsGT applies the GT predicate on the "skills" field.
func SkillsGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldSkills, v))
}

// SkillsGTE applies the GTE predicate on the "skills" field.
func SkillsGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldSkills, v))
}

// SkillsLT applies the LT predicate on the "skills" field.
func SkillsLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldSkills, v))
}

// SkillsLTE applies the LTE predicate on the "skills" field.
func SkillsLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldSkills, v))
}

// SkillsContains applies the Contains predicate on the "skills" field.
func SkillsContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldSkills, v))
}

// SkillsHasPrefix applies the HasPrefix predicate on the "skills" field.
func SkillsHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldSkills, v))
}

// SkillsHasSuffix applies the HasSuffix predicate on the "skills" field.
func SkillsHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldSkills, v))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldSkills))
}

// SkillsEqualFold applies the EqualFold predicate on the "skills" field.
func SkillsEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldSkills, v))
}

// SkillsContainsFold applies the ContainsFold predicate on the "skills" field.
func SkillsContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldSkills, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldLevel, v))
}

// AvatorEQ applies the EQ predicate on the "avator" field.
func AvatorEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldAvator, v))
}

// AvatorNEQ applies the NEQ predicate on the "avator" field.
func AvatorNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldAvator, v))
}

// AvatorIn applies the In predicate on the "avator" field.
func AvatorIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldAvator, vs...))
}

// AvatorNotIn applies the NotIn predicate on the "avator" field.
func AvatorNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldAvator, vs...))
}

// AvatorGT applies the GT predicate on the "avator" field.
func AvatorGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldAvator, v))
}

// AvatorGTE applies the GTE predicate on the "avator" field.
func AvatorGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldAvator, v))
}

// AvatorLT applies the LT predicate on the "avator" field.
func AvatorLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldAvator, v))
}

// AvatorLTE applies the LTE predicate on the "avator" field.
func AvatorLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldAvator, v))
}

// AvatorContains applies the Contains predicate on the "avator" field.
func AvatorContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldAvator, v))
}

// AvatorHasPrefix applies the HasPrefix predicate on the "avator" field.
func AvatorHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldAvator, v))
}

// AvatorHasSuffix applies the HasSuffix predicate on the "avator" field.
func AvatorHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldAvator, v))
}

// AvatorIsNil applies the IsNil predicate on the "avator" field.
func AvatorIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldAvator))
}

// AvatorNotNil applies the NotNil predicate on the "avator" field.
func AvatorNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldAvator))
}

// AvatorEqualFold applies the EqualFold predicate on the "avator" field.
func AvatorEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldAvator, v))
}

// AvatorContainsFold applies the ContainsFold predicate on the "avator" field.
func AvatorContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldAvator, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldUpdateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		p(s.Not())
	})
}
