// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/slider"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Slider is the model entity for the Slider schema.
type Slider struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	CreateBy string `json:"createBy,omitempty"`
	// ImageName holds the value of the "imageName" field.
	ImageName string `json:"imageName,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime time.Time `json:"createTime,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	UpdateBy string `json:"updateBy,omitempty"`
	// ImageRemark holds the value of the "imageRemark" field.
	ImageRemark string `json:"imageRemark,omitempty"`
	// ImageUrl holds the value of the "imageUrl" field.
	ImageUrl string `json:"imageUrl,omitempty"`
	// PcHref holds the value of the "pcHref" field.
	PcHref string `json:"pcHref,omitempty"`
	// UpdateTime holds the value of the "updateTime" field.
	UpdateTime time.Time `json:"updateTime,omitempty"`
	// AppHref holds the value of the "appHref" field.
	AppHref      string `json:"appHref,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Slider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slider.FieldID, slider.FieldCreateBy, slider.FieldImageName, slider.FieldUpdateBy, slider.FieldImageRemark, slider.FieldImageUrl, slider.FieldPcHref, slider.FieldAppHref:
			values[i] = new(sql.NullString)
		case slider.FieldCreateTime, slider.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Slider fields.
func (s *Slider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slider.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case slider.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				s.CreateBy = value.String
			}
		case slider.FieldImageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageName", values[i])
			} else if value.Valid {
				s.ImageName = value.String
			}
		case slider.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case slider.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				s.UpdateBy = value.String
			}
		case slider.FieldImageRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageRemark", values[i])
			} else if value.Valid {
				s.ImageRemark = value.String
			}
		case slider.FieldImageUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageUrl", values[i])
			} else if value.Valid {
				s.ImageUrl = value.String
			}
		case slider.FieldPcHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pcHref", values[i])
			} else if value.Valid {
				s.PcHref = value.String
			}
		case slider.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case slider.FieldAppHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appHref", values[i])
			} else if value.Valid {
				s.AppHref = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Slider.
// This includes values selected through modifiers, order, etc.
func (s *Slider) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Slider.
// Note that you need to call Slider.Unwrap() before calling this method if this Slider
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Slider) Update() *SliderUpdateOne {
	return NewSliderClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Slider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Slider) Unwrap() *Slider {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Slider is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Slider) String() string {
	var builder strings.Builder
	builder.WriteString("Slider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("createBy=")
	builder.WriteString(s.CreateBy)
	builder.WriteString(", ")
	builder.WriteString("imageName=")
	builder.WriteString(s.ImageName)
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updateBy=")
	builder.WriteString(s.UpdateBy)
	builder.WriteString(", ")
	builder.WriteString("imageRemark=")
	builder.WriteString(s.ImageRemark)
	builder.WriteString(", ")
	builder.WriteString("imageUrl=")
	builder.WriteString(s.ImageUrl)
	builder.WriteString(", ")
	builder.WriteString("pcHref=")
	builder.WriteString(s.PcHref)
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("appHref=")
	builder.WriteString(s.AppHref)
	builder.WriteByte(')')
	return builder.String()
}

// Sliders is a parsable slice of Slider.
type Sliders []*Slider
