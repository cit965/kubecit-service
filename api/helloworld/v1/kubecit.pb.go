// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: api/helloworld/v1/kubecit.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeacherLevel int32

const (
	TeacherLevel_TEACHER_LEVEL_UNKNOWN TeacherLevel = 0
	TeacherLevel_TEACHER_ENTRY         TeacherLevel = 1 // 入门
	TeacherLevel_TEACHER_PRIMARY       TeacherLevel = 2 //初级
	TeacherLevel_TEACHER_INTERMEDIATE  TeacherLevel = 3 //中级
	TeacherLevel_TEACHER_SENIOR        TeacherLevel = 4 //高级
	TeacherLevel_TEACHER_MASTER        TeacherLevel = 5 //大师
)

// Enum value maps for TeacherLevel.
var (
	TeacherLevel_name = map[int32]string{
		0: "TEACHER_LEVEL_UNKNOWN",
		1: "TEACHER_ENTRY",
		2: "TEACHER_PRIMARY",
		3: "TEACHER_INTERMEDIATE",
		4: "TEACHER_SENIOR",
		5: "TEACHER_MASTER",
	}
	TeacherLevel_value = map[string]int32{
		"TEACHER_LEVEL_UNKNOWN": 0,
		"TEACHER_ENTRY":         1,
		"TEACHER_PRIMARY":       2,
		"TEACHER_INTERMEDIATE":  3,
		"TEACHER_SENIOR":        4,
		"TEACHER_MASTER":        5,
	}
)

func (x TeacherLevel) Enum() *TeacherLevel {
	p := new(TeacherLevel)
	*p = x
	return p
}

func (x TeacherLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeacherLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[0].Descriptor()
}

func (TeacherLevel) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[0]
}

func (x TeacherLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeacherLevel.Descriptor instead.
func (TeacherLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{0}
}

type CourseStatus int32

const (
	CourseStatus_STATUS_UNKNOWN CourseStatus = 0
	CourseStatus_NOT_REVIEWED   CourseStatus = 1 // 未审核
	CourseStatus_REVIEWED       CourseStatus = 2 // 已审核
	CourseStatus_SHELVED        CourseStatus = 3 // 已上架
	CourseStatus_OFF_SHELVED    CourseStatus = 4 // 已下架
)

// Enum value maps for CourseStatus.
var (
	CourseStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "NOT_REVIEWED",
		2: "REVIEWED",
		3: "SHELVED",
		4: "OFF_SHELVED",
	}
	CourseStatus_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"NOT_REVIEWED":   1,
		"REVIEWED":       2,
		"SHELVED":        3,
		"OFF_SHELVED":    4,
	}
)

func (x CourseStatus) Enum() *CourseStatus {
	p := new(CourseStatus)
	*p = x
	return p
}

func (x CourseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[1].Descriptor()
}

func (CourseStatus) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[1]
}

func (x CourseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseStatus.Descriptor instead.
func (CourseStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{1}
}

type CourseLevel int32

const (
	CourseLevel_LEVEL_UNKNOWN CourseLevel = 0 //
	CourseLevel_BEGINNER      CourseLevel = 1 // 入门
	CourseLevel_ELEMENTARY    CourseLevel = 2 // 初级
	CourseLevel_INTERMEDIATE  CourseLevel = 3 // 中级
	CourseLevel_ADVANCED      CourseLevel = 4 // 高级
	CourseLevel_MASTER        CourseLevel = 5 // 大师
)

// Enum value maps for CourseLevel.
var (
	CourseLevel_name = map[int32]string{
		0: "LEVEL_UNKNOWN",
		1: "BEGINNER",
		2: "ELEMENTARY",
		3: "INTERMEDIATE",
		4: "ADVANCED",
		5: "MASTER",
	}
	CourseLevel_value = map[string]int32{
		"LEVEL_UNKNOWN": 0,
		"BEGINNER":      1,
		"ELEMENTARY":    2,
		"INTERMEDIATE":  3,
		"ADVANCED":      4,
		"MASTER":        5,
	}
)

func (x CourseLevel) Enum() *CourseLevel {
	p := new(CourseLevel)
	*p = x
	return p
}

func (x CourseLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[2].Descriptor()
}

func (CourseLevel) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[2]
}

func (x CourseLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseLevel.Descriptor instead.
func (CourseLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{2}
}

type LessonType int32

const (
	LessonType_LessonType_UNKNOWN LessonType = 0
	LessonType_VIDEO              LessonType = 1 // 视频
	LessonType_AUDIO              LessonType = 2 // 音频
)

// Enum value maps for LessonType.
var (
	LessonType_name = map[int32]string{
		0: "LessonType_UNKNOWN",
		1: "VIDEO",
		2: "AUDIO",
	}
	LessonType_value = map[string]int32{
		"LessonType_UNKNOWN": 0,
		"VIDEO":              1,
		"AUDIO":              2,
	}
)

func (x LessonType) Enum() *LessonType {
	p := new(LessonType)
	*p = x
	return p
}

func (x LessonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[3].Descriptor()
}

func (LessonType) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[3]
}

func (x LessonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonType.Descriptor instead.
func (LessonType) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{3}
}

type FreePreview int32

const (
	FreePreview_UNKNOWN FreePreview = 0
	FreePreview_TRUE    FreePreview = 1 // 是
	FreePreview_FALSE   FreePreview = 2 // 否
)

// Enum value maps for FreePreview.
var (
	FreePreview_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRUE",
		2: "FALSE",
	}
	FreePreview_value = map[string]int32{
		"UNKNOWN": 0,
		"TRUE":    1,
		"FALSE":   2,
	}
)

func (x FreePreview) Enum() *FreePreview {
	p := new(FreePreview)
	*p = x
	return p
}

func (x FreePreview) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FreePreview) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[4].Descriptor()
}

func (FreePreview) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[4]
}

func (x FreePreview) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FreePreview.Descriptor instead.
func (FreePreview) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{4}
}

// 支付类型
type PayType int32

const (
	PayType_NO_PAY   PayType = 0 // 还未支付
	PayType_ALIPAY   PayType = 1 // 支付宝
	PayType_WECHAT   PayType = 2 // 微信支付
	PayType_TRANSFER PayType = 3 // 转账
	PayType_INTERNAL PayType = 4 //内部币
)

// Enum value maps for PayType.
var (
	PayType_name = map[int32]string{
		0: "NO_PAY",
		1: "ALIPAY",
		2: "WECHAT",
		3: "TRANSFER",
		4: "INTERNAL",
	}
	PayType_value = map[string]int32{
		"NO_PAY":   0,
		"ALIPAY":   1,
		"WECHAT":   2,
		"TRANSFER": 3,
		"INTERNAL": 4,
	}
)

func (x PayType) Enum() *PayType {
	p := new(PayType)
	*p = x
	return p
}

func (x PayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[5].Descriptor()
}

func (PayType) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[5]
}

func (x PayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayType.Descriptor instead.
func (PayType) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{5}
}

// 支付状态
type PayStatus int32

const (
	PayStatus_UNPAID        PayStatus = 0 // 未支付
	PayStatus_PAID          PayStatus = 1 // 已支付
	PayStatus_FAILED        PayStatus = 2 //支付失败
	PayStatus_CLOSED        PayStatus = 3 //关闭
	PayStatus_CANCELED      PayStatus = 4 //取消
	PayStatus_REFUNDING     PayStatus = 5 //退款中
	PayStatus_REFUNDED      PayStatus = 6 //退款成功
	PayStatus_REFUND_FAILED PayStatus = 7 //退款失败
)

// Enum value maps for PayStatus.
var (
	PayStatus_name = map[int32]string{
		0: "UNPAID",
		1: "PAID",
		2: "FAILED",
		3: "CLOSED",
		4: "CANCELED",
		5: "REFUNDING",
		6: "REFUNDED",
		7: "REFUND_FAILED",
	}
	PayStatus_value = map[string]int32{
		"UNPAID":        0,
		"PAID":          1,
		"FAILED":        2,
		"CLOSED":        3,
		"CANCELED":      4,
		"REFUNDING":     5,
		"REFUNDED":      6,
		"REFUND_FAILED": 7,
	}
)

func (x PayStatus) Enum() *PayStatus {
	p := new(PayStatus)
	*p = x
	return p
}

func (x PayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_helloworld_v1_kubecit_proto_enumTypes[6].Descriptor()
}

func (PayStatus) Type() protoreflect.EnumType {
	return &file_api_helloworld_v1_kubecit_proto_enumTypes[6]
}

func (x PayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayStatus.Descriptor instead.
func (PayStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{6}
}

type CreateTeacherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail          string `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	CurriculumVitae string `protobuf:"bytes,2,opt,name=curriculum_vitae,json=curriculumVitae,proto3" json:"curriculum_vitae,omitempty"`
	Works           string `protobuf:"bytes,3,opt,name=works,proto3" json:"works,omitempty"`
	Skills          string `protobuf:"bytes,4,opt,name=skills,proto3" json:"skills,omitempty"`
	Avator          string `protobuf:"bytes,5,opt,name=avator,proto3" json:"avator,omitempty"`
	Name            string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Level           int32  `protobuf:"varint,17,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *CreateTeacherRequest) Reset() {
	*x = CreateTeacherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeacherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeacherRequest) ProtoMessage() {}

func (x *CreateTeacherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeacherRequest.ProtoReflect.Descriptor instead.
func (*CreateTeacherRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTeacherRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreateTeacherRequest) GetCurriculumVitae() string {
	if x != nil {
		return x.CurriculumVitae
	}
	return ""
}

func (x *CreateTeacherRequest) GetWorks() string {
	if x != nil {
		return x.Works
	}
	return ""
}

func (x *CreateTeacherRequest) GetSkills() string {
	if x != nil {
		return x.Skills
	}
	return ""
}

func (x *CreateTeacherRequest) GetAvator() string {
	if x != nil {
		return x.Avator
	}
	return ""
}

func (x *CreateTeacherRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeacherRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ListAllTeacherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  *int32 `protobuf:"varint,1,opt,name=pageNum,proto3,oneof" json:"pageNum,omitempty"`
	PageSize *int32 `protobuf:"varint,2,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
}

func (x *ListAllTeacherRequest) Reset() {
	*x = ListAllTeacherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllTeacherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTeacherRequest) ProtoMessage() {}

func (x *ListAllTeacherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTeacherRequest.ProtoReflect.Descriptor instead.
func (*ListAllTeacherRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{1}
}

func (x *ListAllTeacherRequest) GetPageNum() int32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *ListAllTeacherRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GetTeacherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTeacherRequest) Reset() {
	*x = GetTeacherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeacherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeacherRequest) ProtoMessage() {}

func (x *GetTeacherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeacherRequest.ProtoReflect.Descriptor instead.
func (*GetTeacherRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{2}
}

func (x *GetTeacherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListAllTeacherReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teachers []*TeacherInfo `protobuf:"bytes,1,rep,name=teachers,proto3" json:"teachers,omitempty"`
}

func (x *ListAllTeacherReply) Reset() {
	*x = ListAllTeacherReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllTeacherReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTeacherReply) ProtoMessage() {}

func (x *ListAllTeacherReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTeacherReply.ProtoReflect.Descriptor instead.
func (*ListAllTeacherReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllTeacherReply) GetTeachers() []*TeacherInfo {
	if x != nil {
		return x.Teachers
	}
	return nil
}

type TeacherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail          string                 `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`                                          // 讲师详情
	CurriculumVitae string                 `protobuf:"bytes,2,opt,name=curriculum_vitae,json=curriculumVitae,proto3" json:"curriculum_vitae,omitempty"` // 履历描述
	Works           string                 `protobuf:"bytes,3,opt,name=works,proto3" json:"works,omitempty"`                                            // 以往作品
	Skills          string                 `protobuf:"bytes,4,opt,name=skills,proto3" json:"skills,omitempty"`                                          // 技能点
	Avator          string                 `protobuf:"bytes,5,opt,name=avator,proto3" json:"avator,omitempty"`                                          // 头像
	CreateAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                      // 创建时间
	UpdateAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`                      // 更新时间
	Id              int32                  `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Level           TeacherLevel           `protobuf:"varint,10,opt,name=level,proto3,enum=helloworld.v1.TeacherLevel" json:"level,omitempty"`
}

func (x *TeacherInfo) Reset() {
	*x = TeacherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeacherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeacherInfo) ProtoMessage() {}

func (x *TeacherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeacherInfo.ProtoReflect.Descriptor instead.
func (*TeacherInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{4}
}

func (x *TeacherInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *TeacherInfo) GetCurriculumVitae() string {
	if x != nil {
		return x.CurriculumVitae
	}
	return ""
}

func (x *TeacherInfo) GetWorks() string {
	if x != nil {
		return x.Works
	}
	return ""
}

func (x *TeacherInfo) GetSkills() string {
	if x != nil {
		return x.Skills
	}
	return ""
}

func (x *TeacherInfo) GetAvator() string {
	if x != nil {
		return x.Avator
	}
	return ""
}

func (x *TeacherInfo) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *TeacherInfo) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *TeacherInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeacherInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeacherInfo) GetLevel() TeacherLevel {
	if x != nil {
		return x.Level
	}
	return TeacherLevel_TEACHER_LEVEL_UNKNOWN
}

// The request message containing the user's name.
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{5}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{6}
}

type ListCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    *int32 `protobuf:"varint,1,opt,name=level,proto3,oneof" json:"level,omitempty"`
	ParentID *int32 `protobuf:"varint,2,opt,name=parentID,proto3,oneof" json:"parentID,omitempty"`
}

func (x *ListCategoryReq) Reset() {
	*x = ListCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoryReq) ProtoMessage() {}

func (x *ListCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoryReq.ProtoReflect.Descriptor instead.
func (*ListCategoryReq) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{7}
}

func (x *ListCategoryReq) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ListCategoryReq) GetParentID() int32 {
	if x != nil && x.ParentID != nil {
		return *x.ParentID
	}
	return 0
}

type ListCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CategoryInfo `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *ListCategoryResp) Reset() {
	*x = ListCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoryResp) ProtoMessage() {}

func (x *ListCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoryResp.ProtoReflect.Descriptor instead.
func (*ListCategoryResp) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{8}
}

func (x *ListCategoryResp) GetCategories() []*CategoryInfo {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string          `protobuf:"bytes,1,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
	ParentId     int32           `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Level        int32           `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Id           int32           `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Children     []*CategoryInfo `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *CategoryInfo) Reset() {
	*x = CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfo) ProtoMessage() {}

func (x *CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfo.ProtoReflect.Descriptor instead.
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{9}
}

func (x *CategoryInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CategoryInfo) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CategoryInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfo) GetChildren() []*CategoryInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

// The response message containing the greetings
type HelloReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{10}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg       string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Code      string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{11}
}

func (x *Metadata) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Metadata) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Metadata) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type MostNewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CourseInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MostNewReply) Reset() {
	*x = MostNewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MostNewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MostNewReply) ProtoMessage() {}

func (x *MostNewReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MostNewReply.ProtoReflect.Descriptor instead.
func (*MostNewReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{12}
}

func (x *MostNewReply) GetList() []*CourseInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MostNewReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MostNewReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CourseInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MostNewReplyData) Reset() {
	*x = MostNewReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MostNewReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MostNewReplyData) ProtoMessage() {}

func (x *MostNewReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MostNewReplyData.ProtoReflect.Descriptor instead.
func (*MostNewReplyData) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{13}
}

func (x *MostNewReplyData) GetList() []*CourseInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type CourseSearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CourseInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CourseSearchReply) Reset() {
	*x = CourseSearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseSearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseSearchReply) ProtoMessage() {}

func (x *CourseSearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseSearchReply.ProtoReflect.Descriptor instead.
func (*CourseSearchReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{14}
}

func (x *CourseSearchReply) GetList() []*CourseInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CourseSearchReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CourseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level      int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Detail     string                 `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Cover      string                 `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Price      int32                  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Tags       []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Status     int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CategoryId int32                  `protobuf:"varint,9,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	People     int32                  `protobuf:"varint,12,opt,name=people,proto3" json:"people,omitempty"`
	Duration   int32                  `protobuf:"varint,13,opt,name=duration,proto3" json:"duration,omitempty"`
	Score      int32                  `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CourseInfo) Reset() {
	*x = CourseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseInfo) ProtoMessage() {}

func (x *CourseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseInfo.ProtoReflect.Descriptor instead.
func (*CourseInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{15}
}

func (x *CourseInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourseInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CourseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CourseInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CourseInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CourseInfo) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CourseInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CourseInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CourseInfo) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CourseInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CourseInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CourseInfo) GetPeople() int32 {
	if x != nil {
		return x.People
	}
	return 0
}

func (x *CourseInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CourseInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TagsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Course   int32 `protobuf:"varint,3,opt,name=course,proto3" json:"course,omitempty"`
}

func (x *TagsListRequest) Reset() {
	*x = TagsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsListRequest) ProtoMessage() {}

func (x *TagsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsListRequest.ProtoReflect.Descriptor instead.
func (*TagsListRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{16}
}

func (x *TagsListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *TagsListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TagsListRequest) GetCourse() int32 {
	if x != nil {
		return x.Course
	}
	return 0
}

type TagsListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagsListReply) Reset() {
	*x = TagsListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsListReply) ProtoMessage() {}

func (x *TagsListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsListReply.ProtoReflect.Descriptor instead.
func (*TagsListReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{17}
}

func (x *TagsListReply) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{18}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum        *int32      `protobuf:"varint,1,opt,name=pageNum,proto3,oneof" json:"pageNum,omitempty"`
	PageSize       *int32      `protobuf:"varint,2,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	FirstCategory  *int32      `protobuf:"varint,3,opt,name=firstCategory,proto3,oneof" json:"firstCategory,omitempty"`
	SecondCategory *int32      `protobuf:"varint,4,opt,name=secondCategory,proto3,oneof" json:"secondCategory,omitempty"`
	Level          CourseLevel `protobuf:"varint,5,opt,name=level,proto3,enum=helloworld.v1.CourseLevel" json:"level,omitempty"`
	Order          *int32      `protobuf:"varint,6,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *SearchCourseRequest) Reset() {
	*x = SearchCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCourseRequest) ProtoMessage() {}

func (x *SearchCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCourseRequest.ProtoReflect.Descriptor instead.
func (*SearchCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{19}
}

func (x *SearchCourseRequest) GetPageNum() int32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *SearchCourseRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *SearchCourseRequest) GetFirstCategory() int32 {
	if x != nil && x.FirstCategory != nil {
		return *x.FirstCategory
	}
	return 0
}

func (x *SearchCourseRequest) GetSecondCategory() int32 {
	if x != nil && x.SecondCategory != nil {
		return *x.SecondCategory
	}
	return 0
}

func (x *SearchCourseRequest) GetLevel() CourseLevel {
	if x != nil {
		return x.Level
	}
	return CourseLevel_LEVEL_UNKNOWN
}

func (x *SearchCourseRequest) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type UpdateCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level      CourseLevel `protobuf:"varint,2,opt,name=level,proto3,enum=helloworld.v1.CourseLevel" json:"level,omitempty"`
	Name       string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Detail     string      `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Cover      string      `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Price      int32       `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Tags       []string    `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	CategoryId int32       `protobuf:"varint,9,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
}

func (x *UpdateCourseRequest) Reset() {
	*x = UpdateCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseRequest) ProtoMessage() {}

func (x *UpdateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateCourseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCourseRequest) GetLevel() CourseLevel {
	if x != nil {
		return x.Level
	}
	return CourseLevel_LEVEL_UNKNOWN
}

func (x *UpdateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCourseRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateCourseRequest) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *UpdateCourseRequest) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateCourseRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateCourseRequest) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type UpdateCourseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CourseInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCourseReply) Reset() {
	*x = UpdateCourseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCourseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseReply) ProtoMessage() {}

func (x *UpdateCourseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseReply.ProtoReflect.Descriptor instead.
func (*UpdateCourseReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCourseReply) GetData() *CourseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReviewCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status CourseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=helloworld.v1.CourseStatus" json:"status,omitempty"`
}

func (x *ReviewCourseRequest) Reset() {
	*x = ReviewCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewCourseRequest) ProtoMessage() {}

func (x *ReviewCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewCourseRequest.ProtoReflect.Descriptor instead.
func (*ReviewCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{22}
}

func (x *ReviewCourseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReviewCourseRequest) GetStatus() CourseStatus {
	if x != nil {
		return x.Status
	}
	return CourseStatus_STATUS_UNKNOWN
}

type ReviewCourseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CourseInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReviewCourseReply) Reset() {
	*x = ReviewCourseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewCourseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewCourseReply) ProtoMessage() {}

func (x *ReviewCourseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewCourseReply.ProtoReflect.Descriptor instead.
func (*ReviewCourseReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{23}
}

func (x *ReviewCourseReply) GetData() *CourseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      CourseLevel `protobuf:"varint,2,opt,name=level,proto3,enum=helloworld.v1.CourseLevel" json:"level,omitempty"`
	Name       string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Detail     string      `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Cover      string      `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Price      int32       `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Tags       []string    `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	CategoryId int32       `protobuf:"varint,9,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
}

func (x *CreateCourseRequest) Reset() {
	*x = CreateCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseRequest) ProtoMessage() {}

func (x *CreateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseRequest.ProtoReflect.Descriptor instead.
func (*CreateCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{24}
}

func (x *CreateCourseRequest) GetLevel() CourseLevel {
	if x != nil {
		return x.Level
	}
	return CourseLevel_LEVEL_UNKNOWN
}

func (x *CreateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCourseRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreateCourseRequest) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CreateCourseRequest) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateCourseRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateCourseRequest) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type CreateCourseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CourseInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCourseReply) Reset() {
	*x = CreateCourseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCourseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseReply) ProtoMessage() {}

func (x *CreateCourseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseReply.ProtoReflect.Descriptor instead.
func (*CreateCourseReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{25}
}

func (x *CreateCourseReply) GetData() *CourseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCoursesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCoursesRequest) Reset() {
	*x = ListCoursesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursesRequest) ProtoMessage() {}

func (x *ListCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursesRequest.ProtoReflect.Descriptor instead.
func (*ListCoursesRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{26}
}

type ListCoursesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CourseInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCoursesReply) Reset() {
	*x = ListCoursesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursesReply) ProtoMessage() {}

func (x *ListCoursesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursesReply.ProtoReflect.Descriptor instead.
func (*ListCoursesReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{27}
}

func (x *ListCoursesReply) GetData() []*CourseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCourseRequest) Reset() {
	*x = GetCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseRequest) ProtoMessage() {}

func (x *GetCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseRequest.ProtoReflect.Descriptor instead.
func (*GetCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{28}
}

func (x *GetCourseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCourseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CourseInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCourseReply) Reset() {
	*x = GetCourseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseReply) ProtoMessage() {}

func (x *GetCourseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseReply.ProtoReflect.Descriptor instead.
func (*GetCourseReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{29}
}

func (x *GetCourseReply) GetData() *CourseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCourseRequest) Reset() {
	*x = DeleteCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseRequest) ProtoMessage() {}

func (x *DeleteCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCourseRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteCourseRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCourseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteCourseReply) Reset() {
	*x = DeleteCourseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCourseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseReply) ProtoMessage() {}

func (x *DeleteCourseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseReply.ProtoReflect.Descriptor instead.
func (*DeleteCourseReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteCourseReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleasedTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=releasedTime,proto3" json:"releasedTime,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Sort           int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	HasFreePreview int32                  `protobuf:"varint,5,opt,name=hasFreePreview,proto3" json:"hasFreePreview,omitempty"`
	CourseId       int32                  `protobuf:"varint,6,opt,name=courseId,proto3" json:"courseId,omitempty"`
}

func (x *ChapterInfo) Reset() {
	*x = ChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterInfo) ProtoMessage() {}

func (x *ChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterInfo.ProtoReflect.Descriptor instead.
func (*ChapterInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{32}
}

func (x *ChapterInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChapterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChapterInfo) GetReleasedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedTime
	}
	return nil
}

func (x *ChapterInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChapterInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ChapterInfo) GetHasFreePreview() int32 {
	if x != nil {
		return x.HasFreePreview
	}
	return 0
}

func (x *ChapterInfo) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

type CreateChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Sort           *int32      `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	HasFreePreview FreePreview `protobuf:"varint,5,opt,name=hasFreePreview,proto3,enum=helloworld.v1.FreePreview" json:"hasFreePreview,omitempty"`
	CourseId       *int32      `protobuf:"varint,6,opt,name=courseId,proto3,oneof" json:"courseId,omitempty"`
}

func (x *CreateChapterRequest) Reset() {
	*x = CreateChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChapterRequest) ProtoMessage() {}

func (x *CreateChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChapterRequest.ProtoReflect.Descriptor instead.
func (*CreateChapterRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{33}
}

func (x *CreateChapterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChapterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateChapterRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *CreateChapterRequest) GetHasFreePreview() FreePreview {
	if x != nil {
		return x.HasFreePreview
	}
	return FreePreview_UNKNOWN
}

func (x *CreateChapterRequest) GetCourseId() int32 {
	if x != nil && x.CourseId != nil {
		return *x.CourseId
	}
	return 0
}

type CreateChapterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ChapterInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateChapterReply) Reset() {
	*x = CreateChapterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChapterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChapterReply) ProtoMessage() {}

func (x *CreateChapterReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChapterReply.ProtoReflect.Descriptor instead.
func (*CreateChapterReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{34}
}

func (x *CreateChapterReply) GetData() *ChapterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteChapterRequest) Reset() {
	*x = DeleteChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChapterRequest) ProtoMessage() {}

func (x *DeleteChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChapterRequest.ProtoReflect.Descriptor instead.
func (*DeleteChapterRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteChapterRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteChapterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteChapterReply) Reset() {
	*x = DeleteChapterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChapterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChapterReply) ProtoMessage() {}

func (x *DeleteChapterReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChapterReply.ProtoReflect.Descriptor instead.
func (*DeleteChapterReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteChapterReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdateChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32       `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Name           string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Sort           *int32      `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	HasFreePreview FreePreview `protobuf:"varint,5,opt,name=hasFreePreview,proto3,enum=helloworld.v1.FreePreview" json:"hasFreePreview,omitempty"`
	CourseId       *int32      `protobuf:"varint,6,opt,name=courseId,proto3,oneof" json:"courseId,omitempty"`
}

func (x *UpdateChapterRequest) Reset() {
	*x = UpdateChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChapterRequest) ProtoMessage() {}

func (x *UpdateChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChapterRequest.ProtoReflect.Descriptor instead.
func (*UpdateChapterRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateChapterRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateChapterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChapterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateChapterRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *UpdateChapterRequest) GetHasFreePreview() FreePreview {
	if x != nil {
		return x.HasFreePreview
	}
	return FreePreview_UNKNOWN
}

func (x *UpdateChapterRequest) GetCourseId() int32 {
	if x != nil && x.CourseId != nil {
		return *x.CourseId
	}
	return 0
}

type UpdateChapterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ChapterInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateChapterReply) Reset() {
	*x = UpdateChapterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChapterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChapterReply) ProtoMessage() {}

func (x *UpdateChapterReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChapterReply.ProtoReflect.Descriptor instead.
func (*UpdateChapterReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateChapterReply) GetData() *ChapterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListChaptersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId int32 `protobuf:"varint,1,opt,name=courseId,proto3" json:"courseId,omitempty"`
}

func (x *ListChaptersRequest) Reset() {
	*x = ListChaptersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChaptersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChaptersRequest) ProtoMessage() {}

func (x *ListChaptersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChaptersRequest.ProtoReflect.Descriptor instead.
func (*ListChaptersRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{39}
}

func (x *ListChaptersRequest) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

type ListChaptersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ChapterInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListChaptersReply) Reset() {
	*x = ListChaptersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChaptersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChaptersReply) ProtoMessage() {}

func (x *ListChaptersReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChaptersReply.ProtoReflect.Descriptor instead.
func (*ListChaptersReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{40}
}

func (x *ListChaptersReply) GetData() []*ChapterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sort          *int32      `protobuf:"varint,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Type          LessonType  `protobuf:"varint,3,opt,name=type,proto3,enum=helloworld.v1.LessonType" json:"type,omitempty"`
	StoragePath   string      `protobuf:"bytes,4,opt,name=storagePath,proto3" json:"storagePath,omitempty"`
	Source        string      `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Courseware    string      `protobuf:"bytes,6,opt,name=courseware,proto3" json:"courseware,omitempty"`
	IsFreePreview FreePreview `protobuf:"varint,7,opt,name=isFreePreview,proto3,enum=helloworld.v1.FreePreview" json:"isFreePreview,omitempty"`
	ChapterId     *int32      `protobuf:"varint,8,opt,name=chapterId,proto3,oneof" json:"chapterId,omitempty"`
}

func (x *CreateLessonRequest) Reset() {
	*x = CreateLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLessonRequest) ProtoMessage() {}

func (x *CreateLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLessonRequest.ProtoReflect.Descriptor instead.
func (*CreateLessonRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{41}
}

func (x *CreateLessonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLessonRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *CreateLessonRequest) GetType() LessonType {
	if x != nil {
		return x.Type
	}
	return LessonType_LessonType_UNKNOWN
}

func (x *CreateLessonRequest) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *CreateLessonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateLessonRequest) GetCourseware() string {
	if x != nil {
		return x.Courseware
	}
	return ""
}

func (x *CreateLessonRequest) GetIsFreePreview() FreePreview {
	if x != nil {
		return x.IsFreePreview
	}
	return FreePreview_UNKNOWN
}

func (x *CreateLessonRequest) GetChapterId() int32 {
	if x != nil && x.ChapterId != nil {
		return *x.ChapterId
	}
	return 0
}

type CreateLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LessonInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateLessonReply) Reset() {
	*x = CreateLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLessonReply) ProtoMessage() {}

func (x *CreateLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLessonReply.ProtoReflect.Descriptor instead.
func (*CreateLessonReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{42}
}

func (x *CreateLessonReply) GetData() *LessonInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListChapterLessonsWithCourIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseId int32 `protobuf:"varint,1,opt,name=courseId,proto3" json:"courseId,omitempty"`
}

func (x *ListChapterLessonsWithCourIdRequest) Reset() {
	*x = ListChapterLessonsWithCourIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChapterLessonsWithCourIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChapterLessonsWithCourIdRequest) ProtoMessage() {}

func (x *ListChapterLessonsWithCourIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChapterLessonsWithCourIdRequest.ProtoReflect.Descriptor instead.
func (*ListChapterLessonsWithCourIdRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{43}
}

func (x *ListChapterLessonsWithCourIdRequest) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

type ListChapterLessonsWithCourIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ChapterLessonsInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListChapterLessonsWithCourIdReply) Reset() {
	*x = ListChapterLessonsWithCourIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChapterLessonsWithCourIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChapterLessonsWithCourIdReply) ProtoMessage() {}

func (x *ListChapterLessonsWithCourIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChapterLessonsWithCourIdReply.ProtoReflect.Descriptor instead.
func (*ListChapterLessonsWithCourIdReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{44}
}

func (x *ListChapterLessonsWithCourIdReply) GetData() []*ChapterLessonsInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChapterLessonsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapter *ChapterInfo  `protobuf:"bytes,1,opt,name=chapter,proto3" json:"chapter,omitempty"`
	Lessons []*LessonInfo `protobuf:"bytes,2,rep,name=lessons,proto3" json:"lessons,omitempty"`
}

func (x *ChapterLessonsInfo) Reset() {
	*x = ChapterLessonsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterLessonsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterLessonsInfo) ProtoMessage() {}

func (x *ChapterLessonsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterLessonsInfo.ProtoReflect.Descriptor instead.
func (*ChapterLessonsInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{45}
}

func (x *ChapterLessonsInfo) GetChapter() *ChapterInfo {
	if x != nil {
		return x.Chapter
	}
	return nil
}

func (x *ChapterLessonsInfo) GetLessons() []*LessonInfo {
	if x != nil {
		return x.Lessons
	}
	return nil
}

type UpdateLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sort          *int32      `protobuf:"varint,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Type          LessonType  `protobuf:"varint,3,opt,name=type,proto3,enum=helloworld.v1.LessonType" json:"type,omitempty"`
	StoragePath   string      `protobuf:"bytes,4,opt,name=storagePath,proto3" json:"storagePath,omitempty"`
	Source        string      `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Courseware    string      `protobuf:"bytes,6,opt,name=courseware,proto3" json:"courseware,omitempty"`
	IsFreePreview FreePreview `protobuf:"varint,7,opt,name=isFreePreview,proto3,enum=helloworld.v1.FreePreview" json:"isFreePreview,omitempty"`
	ChapterId     *int32      `protobuf:"varint,8,opt,name=chapterId,proto3,oneof" json:"chapterId,omitempty"`
	LessonId      int32       `protobuf:"varint,9,opt,name=lessonId,proto3" json:"lessonId,omitempty"`
}

func (x *UpdateLessonRequest) Reset() {
	*x = UpdateLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLessonRequest) ProtoMessage() {}

func (x *UpdateLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLessonRequest.ProtoReflect.Descriptor instead.
func (*UpdateLessonRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateLessonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLessonRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *UpdateLessonRequest) GetType() LessonType {
	if x != nil {
		return x.Type
	}
	return LessonType_LessonType_UNKNOWN
}

func (x *UpdateLessonRequest) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *UpdateLessonRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateLessonRequest) GetCourseware() string {
	if x != nil {
		return x.Courseware
	}
	return ""
}

func (x *UpdateLessonRequest) GetIsFreePreview() FreePreview {
	if x != nil {
		return x.IsFreePreview
	}
	return FreePreview_UNKNOWN
}

func (x *UpdateLessonRequest) GetChapterId() int32 {
	if x != nil && x.ChapterId != nil {
		return *x.ChapterId
	}
	return 0
}

func (x *UpdateLessonRequest) GetLessonId() int32 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

type UpdateLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LessonInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateLessonReply) Reset() {
	*x = UpdateLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLessonReply) ProtoMessage() {}

func (x *UpdateLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLessonReply.ProtoReflect.Descriptor instead.
func (*UpdateLessonReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateLessonReply) GetData() *LessonInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId int32 `protobuf:"varint,1,opt,name=lessonId,proto3" json:"lessonId,omitempty"`
}

func (x *DeleteLessonRequest) Reset() {
	*x = DeleteLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLessonRequest) ProtoMessage() {}

func (x *DeleteLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLessonRequest.ProtoReflect.Descriptor instead.
func (*DeleteLessonRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteLessonRequest) GetLessonId() int32 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

type DeleteLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteLessonReply) Reset() {
	*x = DeleteLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLessonReply) ProtoMessage() {}

func (x *DeleteLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLessonReply.ProtoReflect.Descriptor instead.
func (*DeleteLessonReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteLessonReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LessonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sort          int32                  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	StoragePath   string                 `protobuf:"bytes,4,opt,name=storagePath,proto3" json:"storagePath,omitempty"`
	Source        string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Courseware    string                 `protobuf:"bytes,6,opt,name=courseware,proto3" json:"courseware,omitempty"`
	IsFreePreview int32                  `protobuf:"varint,7,opt,name=isFreePreview,proto3" json:"isFreePreview,omitempty"`
	ChapterId     int32                  `protobuf:"varint,8,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	Id            int32                  `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	ReleasedTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=releasedTime,proto3" json:"releasedTime,omitempty"`
}

func (x *LessonInfo) Reset() {
	*x = LessonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessonInfo) ProtoMessage() {}

func (x *LessonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessonInfo.ProtoReflect.Descriptor instead.
func (*LessonInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{50}
}

func (x *LessonInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LessonInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *LessonInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LessonInfo) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *LessonInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LessonInfo) GetCourseware() string {
	if x != nil {
		return x.Courseware
	}
	return ""
}

func (x *LessonInfo) GetIsFreePreview() int32 {
	if x != nil {
		return x.IsFreePreview
	}
	return 0
}

func (x *LessonInfo) GetChapterId() int32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *LessonInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LessonInfo) GetReleasedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedTime
	}
	return nil
}

type SliderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content   string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ImageLink string                 `protobuf:"bytes,4,opt,name=imageLink,proto3" json:"imageLink,omitempty"`
	CreateAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	IsValid   bool                   `protobuf:"varint,7,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Priority  int32                  `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *SliderInfo) Reset() {
	*x = SliderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliderInfo) ProtoMessage() {}

func (x *SliderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliderInfo.ProtoReflect.Descriptor instead.
func (*SliderInfo) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{51}
}

func (x *SliderInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SliderInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SliderInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SliderInfo) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *SliderInfo) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *SliderInfo) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *SliderInfo) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *SliderInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type CreateSliderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ImageLink string `protobuf:"bytes,3,opt,name=imageLink,proto3" json:"imageLink,omitempty"`
	IsValid   bool   `protobuf:"varint,4,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Priority  int32  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *CreateSliderRequest) Reset() {
	*x = CreateSliderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSliderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSliderRequest) ProtoMessage() {}

func (x *CreateSliderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSliderRequest.ProtoReflect.Descriptor instead.
func (*CreateSliderRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{52}
}

func (x *CreateSliderRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateSliderRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateSliderRequest) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *CreateSliderRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CreateSliderRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type CreateSliderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *SliderInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateSliderReply) Reset() {
	*x = CreateSliderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSliderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSliderReply) ProtoMessage() {}

func (x *CreateSliderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSliderReply.ProtoReflect.Descriptor instead.
func (*CreateSliderReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{53}
}

func (x *CreateSliderReply) GetData() *SliderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSliderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSliderRequest) Reset() {
	*x = GetSliderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliderRequest) ProtoMessage() {}

func (x *GetSliderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliderRequest.ProtoReflect.Descriptor instead.
func (*GetSliderRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{54}
}

func (x *GetSliderRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSliderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *SliderInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSliderReply) Reset() {
	*x = GetSliderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliderReply) ProtoMessage() {}

func (x *GetSliderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliderReply.ProtoReflect.Descriptor instead.
func (*GetSliderReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{55}
}

func (x *GetSliderReply) GetData() *SliderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteSliderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSliderRequest) Reset() {
	*x = DeleteSliderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSliderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSliderRequest) ProtoMessage() {}

func (x *DeleteSliderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSliderRequest.ProtoReflect.Descriptor instead.
func (*DeleteSliderRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteSliderRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteSliderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteSliderReply) Reset() {
	*x = DeleteSliderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSliderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSliderReply) ProtoMessage() {}

func (x *DeleteSliderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSliderReply.ProtoReflect.Descriptor instead.
func (*DeleteSliderReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteSliderReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdateSliderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ImageLink string `protobuf:"bytes,4,opt,name=imageLink,proto3" json:"imageLink,omitempty"`
	IsValid   bool   `protobuf:"varint,5,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Priority  int32  `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *UpdateSliderRequest) Reset() {
	*x = UpdateSliderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSliderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSliderRequest) ProtoMessage() {}

func (x *UpdateSliderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSliderRequest.ProtoReflect.Descriptor instead.
func (*UpdateSliderRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateSliderRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSliderRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateSliderRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateSliderRequest) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *UpdateSliderRequest) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *UpdateSliderRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateSliderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *SliderInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateSliderReply) Reset() {
	*x = UpdateSliderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSliderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSliderReply) ProtoMessage() {}

func (x *UpdateSliderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSliderReply.ProtoReflect.Descriptor instead.
func (*UpdateSliderReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateSliderReply) GetData() *SliderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListSlidersByPriorityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority int32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Count    int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListSlidersByPriorityRequest) Reset() {
	*x = ListSlidersByPriorityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSlidersByPriorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSlidersByPriorityRequest) ProtoMessage() {}

func (x *ListSlidersByPriorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSlidersByPriorityRequest.ProtoReflect.Descriptor instead.
func (*ListSlidersByPriorityRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{60}
}

func (x *ListSlidersByPriorityRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ListSlidersByPriorityRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListSlidersByPriorityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SliderInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListSlidersByPriorityReply) Reset() {
	*x = ListSlidersByPriorityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSlidersByPriorityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSlidersByPriorityReply) ProtoMessage() {}

func (x *ListSlidersByPriorityReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSlidersByPriorityReply.ProtoReflect.Descriptor instead.
func (*ListSlidersByPriorityReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{61}
}

func (x *ListSlidersByPriorityReply) GetData() []*SliderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{62}
}

type UserInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	RoleId   uint32 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Channel  string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *UserInfoReply) Reset() {
	*x = UserInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReply) ProtoMessage() {}

func (x *UserInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReply.ProtoReflect.Descriptor instead.
func (*UserInfoReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{63}
}

func (x *UserInfoReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfoReply) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UserInfoReply) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type LoginByJsonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginByJsonRequest) Reset() {
	*x = LoginByJsonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByJsonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByJsonRequest) ProtoMessage() {}

func (x *LoginByJsonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByJsonRequest.ProtoReflect.Descriptor instead.
func (*LoginByJsonRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{64}
}

func (x *LoginByJsonRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginByJsonRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginByJsonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Metadata             `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data *LoginByJsonReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoginByJsonReply) Reset() {
	*x = LoginByJsonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByJsonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByJsonReply) ProtoMessage() {}

func (x *LoginByJsonReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByJsonReply.ProtoReflect.Descriptor instead.
func (*LoginByJsonReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{65}
}

func (x *LoginByJsonReply) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LoginByJsonReply) GetData() *LoginByJsonReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegisterUsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegisterUsernameRequest) Reset() {
	*x = RegisterUsernameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUsernameRequest) ProtoMessage() {}

func (x *RegisterUsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUsernameRequest.ProtoReflect.Descriptor instead.
func (*RegisterUsernameRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{66}
}

func (x *RegisterUsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterUsernameRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterUsernameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Metadata             `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data *LoginByJsonReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RegisterUsernameReply) Reset() {
	*x = RegisterUsernameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUsernameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUsernameReply) ProtoMessage() {}

func (x *RegisterUsernameReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUsernameReply.ProtoReflect.Descriptor instead.
func (*RegisterUsernameReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{67}
}

func (x *RegisterUsernameReply) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RegisterUsernameReply) GetData() *LoginByJsonReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginByJsonReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *LoginByJsonReplyData) Reset() {
	*x = LoginByJsonReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByJsonReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByJsonReplyData) ProtoMessage() {}

func (x *LoginByJsonReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByJsonReplyData.ProtoReflect.Descriptor instead.
func (*LoginByJsonReplyData) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{68}
}

func (x *LoginByJsonReplyData) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type DeleteCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCategoryReq) Reset() {
	*x = DeleteCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryReq) ProtoMessage() {}

func (x *DeleteCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteCategoryReq) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteCategoryReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
	Id           int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateCategoryReq) Reset() {
	*x = UpdateCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryReq) ProtoMessage() {}

func (x *UpdateCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateCategoryReq) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateCategoryReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UpdateCategoryReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SystemSettingsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logourl     string `protobuf:"bytes,1,opt,name=logourl,proto3" json:"logourl,omitempty"`
	Wechaturl   string `protobuf:"bytes,2,opt,name=wechaturl,proto3" json:"wechaturl,omitempty"`
	Computerurl string `protobuf:"bytes,3,opt,name=computerurl,proto3" json:"computerurl,omitempty"`
}

func (x *SystemSettingsReply) Reset() {
	*x = SystemSettingsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsReply) ProtoMessage() {}

func (x *SystemSettingsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsReply.ProtoReflect.Descriptor instead.
func (*SystemSettingsReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{71}
}

func (x *SystemSettingsReply) GetLogourl() string {
	if x != nil {
		return x.Logourl
	}
	return ""
}

func (x *SystemSettingsReply) GetWechaturl() string {
	if x != nil {
		return x.Wechaturl
	}
	return ""
}

func (x *SystemSettingsReply) GetComputerurl() string {
	if x != nil {
		return x.Computerurl
	}
	return ""
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseIds []int32 `protobuf:"varint,1,rep,packed,name=courseIds,proto3" json:"courseIds,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{72}
}

func (x *CreateOrderRequest) GetCourseIds() []int32 {
	if x != nil {
		return x.CourseIds
	}
	return nil
}

type OrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            int32  `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ProductId          int32  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductName        string `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductPrice       int32  `protobuf:"varint,4,opt,name=productPrice,proto3" json:"productPrice,omitempty"`
	ProductDescription string `protobuf:"bytes,5,opt,name=productDescription,proto3" json:"productDescription,omitempty"`
}

func (x *OrderDetail) Reset() {
	*x = OrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetail) ProtoMessage() {}

func (x *OrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetail.ProtoReflect.Descriptor instead.
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{73}
}

func (x *OrderDetail) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderDetail) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OrderDetail) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OrderDetail) GetProductPrice() int32 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *OrderDetail) GetProductDescription() string {
	if x != nil {
		return x.ProductDescription
	}
	return ""
}

type CreateOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrderSn    string                 `protobuf:"bytes,2,opt,name=orderSn,proto3" json:"orderSn,omitempty"`
	PayType    PayType                `protobuf:"varint,3,opt,name=payType,proto3,enum=helloworld.v1.PayType" json:"payType,omitempty"`
	PayStatus  PayStatus              `protobuf:"varint,4,opt,name=payStatus,proto3,enum=helloworld.v1.PayStatus" json:"payStatus,omitempty"`
	TradePrice int32                  `protobuf:"varint,5,opt,name=tradePrice,proto3" json:"tradePrice,omitempty"`
	TradeNo    string                 `protobuf:"bytes,6,opt,name=tradeNo,proto3" json:"tradeNo,omitempty"`
	PayTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=payTime,proto3" json:"payTime,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Details    []*OrderDetail         `protobuf:"bytes,10,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *CreateOrderReply) Reset() {
	*x = CreateOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReply) ProtoMessage() {}

func (x *CreateOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_helloworld_v1_kubecit_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReply.ProtoReflect.Descriptor instead.
func (*CreateOrderReply) Descriptor() ([]byte, []int) {
	return file_api_helloworld_v1_kubecit_proto_rawDescGZIP(), []int{74}
}

func (x *CreateOrderReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateOrderReply) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

func (x *CreateOrderReply) GetPayType() PayType {
	if x != nil {
		return x.PayType
	}
	return PayType_NO_PAY
}

func (x *CreateOrderReply) GetPayStatus() PayStatus {
	if x != nil {
		return x.PayStatus
	}
	return PayStatus_UNPAID
}

func (x *CreateOrderReply) GetTradePrice() int32 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *CreateOrderReply) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *CreateOrderReply) GetPayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *CreateOrderReply) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CreateOrderReply) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CreateOrderReply) GetDetails() []*OrderDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_api_helloworld_v1_kubecit_proto protoreflect.FileDescriptor

var file_api_helloworld_v1_kubecit_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x03, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xae, 0xb2, 0xe5, 0xb8, 0x88, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x32, 0x0c, 0xe8, 0xae, 0xb2, 0xe5, 0xb8, 0x88, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x76, 0x69, 0x74,
	0x61, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10, 0x2a, 0x06, 0xe5,
	0xb1, 0xa5, 0xe5, 0x8e, 0x86, 0x32, 0x06, 0xe5, 0xb1, 0xa5, 0xe5, 0x8e, 0x86, 0xe0, 0x41, 0x02,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x56, 0x69, 0x74, 0x61,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x10, 0x2a, 0x06, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0x32, 0x06, 0xe4,
	0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x16, 0x2a, 0x09, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0x82, 0xb9, 0x32,
	0x09, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0x82, 0xb9, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10, 0x2a, 0x06, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0x32, 0x06, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10, 0x2a, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d,
	0x32, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x7d, 0x92, 0x41, 0x77, 0x2a, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x32, 0x6d,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x20, 0x3d, 0x20, 0x31, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe5, 0x85,
	0xa5, 0xe9, 0x97, 0xa8, 0x20, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x20, 0x3d, 0x20, 0x32,
	0x3b, 0x20, 0x2f, 0x2f, 0xe5, 0x88, 0x9d, 0xe7, 0xba, 0xa7, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x20, 0x3d, 0x20, 0x33, 0x3b, 0x20, 0x2f, 0x2f, 0xe4,
	0xb8, 0xad, 0xe7, 0xba, 0xa7, 0x20, 0x53, 0x45, 0x4e, 0x49, 0x4f, 0x52, 0x20, 0x3d, 0x20, 0x34,
	0x3b, 0x2f, 0x2f, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0x20, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x20, 0x3d, 0x20, 0x35, 0x3b, 0x2f, 0x2f, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x70, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0xdf, 0x02,
	0x0a, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75,
	0x6c, 0x75, 0x6d, 0x5f, 0x76, 0x69, 0x74, 0x61, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x56, 0x69, 0x74, 0x61, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x22, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xca, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x4d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0c, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe7, 0xba, 0xa7, 0xe5,
	0x88, 0xab, 0x32, 0x1f, 0x31, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xef, 0xbc,
	0x9a, 0x31, 0xef, 0xbc, 0x9b, 0x32, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xef,
	0xbc, 0x9a, 0x32, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0c, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
	0x86, 0xe7, 0xb1, 0xbb, 0x32, 0x1d, 0xe5, 0x88, 0x97, 0xe5, 0x87, 0xba, 0x31, 0xe7, 0xba, 0xa7,
	0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x86, 0x99, 0x32, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86,
	0xe7, 0xb1, 0xbb, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x0a, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x53, 0x0a, 0x0c, 0x4d, 0x6f, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x10,
	0x4d, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x58, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa3, 0x07, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0x69, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x62, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe7, 0xba, 0xa7,
	0xe5, 0x88, 0xab, 0x32, 0x39, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
	0xab, 0x20, 0x31, 0x20, 0xe5, 0x85, 0xa5, 0xe9, 0x97, 0xa8, 0xef, 0xbc, 0x8c, 0x32, 0xe5, 0x88,
	0x9d, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0x33, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0x20, 0x34,
	0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0x20, 0x35, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x0c, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5,
	0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0xb0, 0x81,
	0xe9, 0x9d, 0xa2, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0c,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x32, 0x16, 0xe8, 0xaf,
	0xbe, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x2c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0xe5, 0x88, 0x86, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x32, 0x0c, 0xe8, 0xaf,
	0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x9e, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x32, 0x71, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x31, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe6, 0x9c, 0xaa,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0x20, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x20,
	0x3d, 0x20, 0x32, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0x20, 0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x33, 0x3b, 0x20, 0x2f,
	0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0x20, 0x4f, 0x46, 0x46, 0x5f,
	0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x34, 0x3b, 0x20, 0x2f, 0x2f, 0x20,
	0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe5, 0x88, 0x86, 0xe7,
	0xb1, 0xbb, 0x49, 0x44, 0x32, 0x08, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x49, 0x44, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x2a, 0x06, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x32, 0x06, 0xe4, 0xba, 0xba,
	0xe6, 0x95, 0xb0, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf,
	0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf,
	0xbe, 0xe7, 0xa8, 0x8b, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x5f, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x22, 0x37, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92,
	0x41, 0x10, 0x2a, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7,
	0xa0, 0x81, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x2a, 0x09, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x32, 0x09, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0x92, 0x41, 0x23, 0x2a, 0x08,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x32, 0x17, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69,
	0x64, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x26, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86,
	0xe7, 0xb1, 0xbb, 0x69, 0x64, 0x32, 0x0e, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86,
	0xe7, 0xb1, 0xbb, 0x69, 0x64, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x42, 0x92, 0x41, 0x3c, 0x2a, 0x0c, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x32, 0x2c, 0x31, 0x20, 0xe5,
	0x85, 0xa5, 0xe9, 0x97, 0xa8, 0xef, 0xbc, 0x8c, 0x32, 0xe5, 0x88, 0x9d, 0xe7, 0xba, 0xa7, 0xef,
	0xbc, 0x8c, 0x33, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0x20, 0x34, 0xe9, 0xab, 0x98, 0xe7, 0xba,
	0xa7, 0x20, 0x35, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x65, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x4a, 0x92, 0x41, 0x44, 0x2a, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x32, 0x34, 0x31, 0x20, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe6,
	0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe6, 0x8e, 0x92, 0xe5, 0xba,
	0x8f, 0x20, 0x32, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe7,
	0xbb, 0xbc, 0xe5, 0x90, 0x88, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe0, 0x41, 0x01, 0x48, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xa9, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x42, 0x92, 0x41, 0x3c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0x32, 0x2c, 0x31, 0x20, 0xe5, 0x85, 0xa5, 0xe9, 0x97, 0xa8, 0xef, 0xbc,
	0x8c, 0x32, 0xe5, 0x88, 0x9d, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0x33, 0xe4, 0xb8, 0xad, 0xe7,
	0xba, 0xa7, 0x20, 0x34, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0x20, 0x35, 0xe5, 0xa4, 0xa7, 0xe5,
	0xb8, 0x88, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0xb0, 0x81, 0xe9,
	0x9d, 0xa2, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x2a, 0x0c,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x32, 0x16, 0xe8, 0xaf,
	0xbe, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x20, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0xe5, 0x88, 0x86, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x32,
	0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92, 0x41, 0x20, 0x2a,
	0x0e, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x49, 0x44, 0x32,
	0x0e, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x49, 0x44, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x42,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x91, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0x92, 0x41, 0x23, 0x2a, 0x08, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x32, 0x17, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0xbe, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x88, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x32, 0x71, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x31, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe6,
	0x9c, 0xaa, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0x20, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x44, 0x20, 0x3d, 0x20, 0x32, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0x20, 0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x33, 0x3b,
	0x20, 0x2f, 0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0x20, 0x4f, 0x46,
	0x46, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x34, 0x3b, 0x20, 0x2f,
	0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x04, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x74, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x42, 0x92,
	0x41, 0x3c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x32, 0x2c, 0x31, 0x20, 0xe5, 0x85, 0xa5, 0xe9, 0x97, 0xa8, 0xef, 0xbc, 0x8c, 0x32, 0xe5, 0x88,
	0x9d, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0x33, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0x20, 0x34,
	0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0x20, 0x35, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0xe0, 0x41,
	0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x32, 0x0c,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x88, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6, 0xa0,
	0x87, 0xe7, 0xad, 0xbe, 0x32, 0x71, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x45, 0x44, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe6, 0x9c, 0xaa, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0x20, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x20, 0x3d, 0x20,
	0x31, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0x20,
	0x53, 0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x32, 0x3b, 0x20, 0x2f, 0x2f, 0x20,
	0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0x20, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x48,
	0x45, 0x4c, 0x56, 0x45, 0x44, 0x20, 0x3d, 0x20, 0x33, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0xe5, 0xb7,
	0xb2, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe5, 0x88, 0x86, 0xe7, 0xb1,
	0xbb, 0x49, 0x64, 0x32, 0x08, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x49, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08,
	0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b,
	0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x42, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0x69, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x49, 0x44,
	0x32, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32,
	0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0x8f, 0x91, 0xe5,
	0xb8, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x0c, 0xe7, 0xab,
	0xa0, 0xe8, 0x8a, 0x82, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0, 0xe8,
	0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x32, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82,
	0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88,
	0x32, 0x0e, 0x31, 0x20, 0xe6, 0x9c, 0x89, 0x20, 0x32, 0x20, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89,
	0x52, 0x0e, 0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69,
	0x64, 0x32, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x69, 0x64, 0x32, 0x08, 0xe7, 0xab, 0xa0,
	0xe8, 0x8a, 0x82, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5,
	0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xba, 0x8f,
	0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x77, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x2a, 0x1b, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0xa2, 0x84, 0xe8, 0xa7,
	0x88, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x32, 0x0e, 0x31, 0x20, 0xe6, 0x9c, 0x89, 0x20, 0x32,
	0x20, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x46,
	0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x69, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1a, 0x92,
	0x41, 0x14, 0x2a, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x69, 0x64, 0x32, 0x08, 0xe7, 0xab,
	0xa0, 0xe8, 0x8a, 0x82, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc9, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe7,
	0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x69, 0x64, 0x32, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x69,
	0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0,
	0xe8, 0x8a, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a,
	0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0, 0xe8,
	0x8a, 0x82, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a,
	0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x32, 0x0c, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x77, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x2a, 0x1b, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0xa2, 0x84,
	0xe8, 0xa7, 0x88, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x32, 0x0e, 0x31, 0x20, 0xe6, 0x9c, 0x89,
	0x20, 0x32, 0x20, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x68, 0x61,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x04, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x32, 0x08,
	0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5,
	0xba, 0x8f, 0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x27, 0x92, 0x41, 0x21, 0x2a, 0x0c, 0xe5, 0xb0,
	0x8f, 0xe8, 0x8a, 0x82, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x11, 0x31, 0x20, 0xe8, 0xa7,
	0x86, 0xe9, 0xa2, 0x91, 0x20, 0x32, 0x20, 0xe9, 0x9f, 0xb3, 0xe9, 0xa2, 0x91, 0xe0, 0x41, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x28,
	0x2a, 0x12, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x32, 0x12, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x96, 0x87, 0xe4,
	0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5,
	0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x32, 0x0c, 0xe5, 0xb0, 0x8f,
	0xe8, 0x8a, 0x82, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8,
	0xaf, 0xbe, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x32, 0x0c, 0xe8, 0xaf, 0xbe,
	0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x2a, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0x8d, 0xe8, 0xb4,
	0xb9, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0x32, 0x0e, 0x31, 0x20, 0xe6, 0x98, 0xaf, 0x20, 0x32,
	0x20, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xbe,
	0xe7, 0xa8, 0x8b, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x5a, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x22,
	0xa8, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8,
	0x8a, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f,
	0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe0, 0x41,
	0x02, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8,
	0x8a, 0x82, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x28, 0x2a, 0x12, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a,
	0x82, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x32, 0x12, 0xe5,
	0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x9d,
	0xa5, 0xe6, 0xba, 0x90, 0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x9d, 0xa5, 0xe6,
	0xba, 0x90, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf, 0xbe, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x69, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x27, 0x92, 0x41, 0x21, 0x2a, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0x32, 0x0b, 0x31,
	0x20, 0xe6, 0x98, 0xaf, 0x20, 0x32, 0x20, 0xe5, 0x90, 0xa6, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3d, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x32, 0x08,
	0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92,
	0x41, 0x14, 0x2a, 0x08, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x32, 0x08, 0xe5, 0xb0,
	0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe5, 0xb0,
	0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x32, 0x08, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x29, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x05, 0x0a, 0x0a, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8,
	0x8a, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x32, 0x0c, 0xe5,
	0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x24, 0x92, 0x41, 0x21, 0x2a, 0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x32, 0x11, 0x31, 0x20, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0x20, 0x32, 0x20, 0xe9,
	0x9f, 0xb3, 0xe9, 0xa2, 0x91, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x12, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x32, 0x12, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a,
	0x82, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x32, 0x0c, 0xe5,
	0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe8, 0xaf,
	0xbe, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x32, 0x0c, 0xe8, 0xaf, 0xbe, 0xe4,
	0xbb, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x21,
	0x2a, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0xa2,
	0x84, 0xe8, 0xa7, 0x88, 0x32, 0x0b, 0x31, 0x20, 0xe6, 0x98, 0xaf, 0x20, 0x32, 0x20, 0xe5, 0x90,
	0xa6, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x35, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82,
	0x49, 0x44, 0x32, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82,
	0x49, 0x44, 0x32, 0x08, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5f, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x42, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x29, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x4c, 0x0a, 0x12,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x78, 0x0a, 0x10, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x06, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7d, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6f,
	0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x75, 0x72, 0x6c, 0x22,
	0x32, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xcc, 0x03, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x34, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2a, 0x93, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x49, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x60, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48,
	0x45, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x46, 0x46, 0x5f, 0x53,
	0x48, 0x45, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44,
	0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x05, 0x2a, 0x3a, 0x0a, 0x0a, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02,
	0x2a, 0x2f, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10,
	0x02, 0x2a, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x49, 0x50,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x09,
	0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x32, 0x8e, 0x26, 0x0a, 0x07, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x69,
	0x74, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x18, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x0c, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x37, 0x92, 0x41, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x0e, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x76, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x12, 0x7a, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x35, 0x92, 0x41, 0x18, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x0c,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x32, 0x92, 0x41, 0x18, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35,
	0x92, 0x41, 0x18, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x73, 0x74, 0x4e, 0x65,
	0x77, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x43, 0x92, 0x41, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2f, 0x6d, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x54, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x92, 0x41, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x3c, 0x92, 0x41, 0x1c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a,
	0x12, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x90, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x92, 0x41, 0x1c, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x1a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x92, 0x41, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe8,
	0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x32, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x85, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x92, 0x41, 0x1c, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x87, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x37, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x23,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xab, 0xa0, 0xe8, 0x8a,
	0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xab, 0xa0,
	0xe8, 0x8a, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x7b,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x3c, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x1a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xab, 0xa0, 0xe8, 0x8a, 0x82, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xb0, 0x8f,
	0xe8, 0x8a, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x12, 0xc3, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4e, 0x92, 0x41, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x1a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8,
	0x8b, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x92,
	0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01,
	0x2a, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x7b, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x7d,
	0x12, 0x94, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x1a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb0, 0x8f, 0xe8,
	0x8a, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x7b, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x32, 0x92, 0x41, 0x14, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x92, 0x41, 0x14, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x1a, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x75, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0xa7, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x45, 0x92, 0x41, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6,
	0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x38,
	0x92, 0x41, 0x1f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x15, 0xe9, 0xa6, 0x96,
	0xe9, 0xa1, 0xb5, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x40, 0x92, 0x41, 0x25, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x1a, 0x1b, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe8, 0xbd, 0xae, 0xe6, 0x92,
	0xad, 0xe5, 0x9b, 0xbe, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3a, 0x92, 0x41, 0x1f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x15, 0xe9, 0xa6,
	0x96, 0xe9, 0xa1, 0xb5, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x3d, 0x92, 0x41, 0x1f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a,
	0x15, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x92, 0x41,
	0x1f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x15, 0xe9, 0xa6, 0x96, 0xe9, 0xa1,
	0xb5, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x34, 0x92, 0x41, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x0c,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x92, 0x41, 0x26,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x2c, 0xe4, 0xbc, 0xa0, 0xe5, 0x8f, 0x82, 0xe8, 0xaf, 0xbe, 0xe7,
	0xa8, 0x8b, 0x5b, 0x69, 0x64, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22,
	0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x24,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x92, 0x41, 0x1d, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x12, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xae, 0xb2, 0xe5, 0xb8, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12,
	0x7f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x92, 0x41, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x0c, 0xe8, 0xae, 0xb2, 0xe5, 0xb8,
	0x88, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x83, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x31, 0x92, 0x41, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xb2, 0xe5, 0xb8, 0x88, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x42, 0x59, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x24, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x69, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_helloworld_v1_kubecit_proto_rawDescOnce sync.Once
	file_api_helloworld_v1_kubecit_proto_rawDescData = file_api_helloworld_v1_kubecit_proto_rawDesc
)

func file_api_helloworld_v1_kubecit_proto_rawDescGZIP() []byte {
	file_api_helloworld_v1_kubecit_proto_rawDescOnce.Do(func() {
		file_api_helloworld_v1_kubecit_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_helloworld_v1_kubecit_proto_rawDescData)
	})
	return file_api_helloworld_v1_kubecit_proto_rawDescData
}

var file_api_helloworld_v1_kubecit_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_helloworld_v1_kubecit_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_api_helloworld_v1_kubecit_proto_goTypes = []interface{}{
	(TeacherLevel)(0),                           // 0: helloworld.v1.TeacherLevel
	(CourseStatus)(0),                           // 1: helloworld.v1.CourseStatus
	(CourseLevel)(0),                            // 2: helloworld.v1.CourseLevel
	(LessonType)(0),                             // 3: helloworld.v1.LessonType
	(FreePreview)(0),                            // 4: helloworld.v1.FreePreview
	(PayType)(0),                                // 5: helloworld.v1.PayType
	(PayStatus)(0),                              // 6: helloworld.v1.PayStatus
	(*CreateTeacherRequest)(nil),                // 7: helloworld.v1.CreateTeacherRequest
	(*ListAllTeacherRequest)(nil),               // 8: helloworld.v1.ListAllTeacherRequest
	(*GetTeacherRequest)(nil),                   // 9: helloworld.v1.GetTeacherRequest
	(*ListAllTeacherReply)(nil),                 // 10: helloworld.v1.ListAllTeacherReply
	(*TeacherInfo)(nil),                         // 11: helloworld.v1.TeacherInfo
	(*HelloRequest)(nil),                        // 12: helloworld.v1.HelloRequest
	(*Empty)(nil),                               // 13: helloworld.v1.Empty
	(*ListCategoryReq)(nil),                     // 14: helloworld.v1.ListCategoryReq
	(*ListCategoryResp)(nil),                    // 15: helloworld.v1.ListCategoryResp
	(*CategoryInfo)(nil),                        // 16: helloworld.v1.CategoryInfo
	(*HelloReply)(nil),                          // 17: helloworld.v1.HelloReply
	(*Metadata)(nil),                            // 18: helloworld.v1.Metadata
	(*MostNewReply)(nil),                        // 19: helloworld.v1.MostNewReply
	(*MostNewReplyData)(nil),                    // 20: helloworld.v1.MostNewReplyData
	(*CourseSearchReply)(nil),                   // 21: helloworld.v1.CourseSearchReply
	(*CourseInfo)(nil),                          // 22: helloworld.v1.CourseInfo
	(*TagsListRequest)(nil),                     // 23: helloworld.v1.TagsListRequest
	(*TagsListReply)(nil),                       // 24: helloworld.v1.TagsListReply
	(*Tag)(nil),                                 // 25: helloworld.v1.Tag
	(*SearchCourseRequest)(nil),                 // 26: helloworld.v1.SearchCourseRequest
	(*UpdateCourseRequest)(nil),                 // 27: helloworld.v1.UpdateCourseRequest
	(*UpdateCourseReply)(nil),                   // 28: helloworld.v1.UpdateCourseReply
	(*ReviewCourseRequest)(nil),                 // 29: helloworld.v1.ReviewCourseRequest
	(*ReviewCourseReply)(nil),                   // 30: helloworld.v1.ReviewCourseReply
	(*CreateCourseRequest)(nil),                 // 31: helloworld.v1.CreateCourseRequest
	(*CreateCourseReply)(nil),                   // 32: helloworld.v1.CreateCourseReply
	(*ListCoursesRequest)(nil),                  // 33: helloworld.v1.ListCoursesRequest
	(*ListCoursesReply)(nil),                    // 34: helloworld.v1.ListCoursesReply
	(*GetCourseRequest)(nil),                    // 35: helloworld.v1.GetCourseRequest
	(*GetCourseReply)(nil),                      // 36: helloworld.v1.GetCourseReply
	(*DeleteCourseRequest)(nil),                 // 37: helloworld.v1.DeleteCourseRequest
	(*DeleteCourseReply)(nil),                   // 38: helloworld.v1.DeleteCourseReply
	(*ChapterInfo)(nil),                         // 39: helloworld.v1.ChapterInfo
	(*CreateChapterRequest)(nil),                // 40: helloworld.v1.CreateChapterRequest
	(*CreateChapterReply)(nil),                  // 41: helloworld.v1.CreateChapterReply
	(*DeleteChapterRequest)(nil),                // 42: helloworld.v1.DeleteChapterRequest
	(*DeleteChapterReply)(nil),                  // 43: helloworld.v1.DeleteChapterReply
	(*UpdateChapterRequest)(nil),                // 44: helloworld.v1.UpdateChapterRequest
	(*UpdateChapterReply)(nil),                  // 45: helloworld.v1.UpdateChapterReply
	(*ListChaptersRequest)(nil),                 // 46: helloworld.v1.ListChaptersRequest
	(*ListChaptersReply)(nil),                   // 47: helloworld.v1.ListChaptersReply
	(*CreateLessonRequest)(nil),                 // 48: helloworld.v1.CreateLessonRequest
	(*CreateLessonReply)(nil),                   // 49: helloworld.v1.CreateLessonReply
	(*ListChapterLessonsWithCourIdRequest)(nil), // 50: helloworld.v1.ListChapterLessonsWithCourIdRequest
	(*ListChapterLessonsWithCourIdReply)(nil),   // 51: helloworld.v1.ListChapterLessonsWithCourIdReply
	(*ChapterLessonsInfo)(nil),                  // 52: helloworld.v1.ChapterLessonsInfo
	(*UpdateLessonRequest)(nil),                 // 53: helloworld.v1.UpdateLessonRequest
	(*UpdateLessonReply)(nil),                   // 54: helloworld.v1.UpdateLessonReply
	(*DeleteLessonRequest)(nil),                 // 55: helloworld.v1.DeleteLessonRequest
	(*DeleteLessonReply)(nil),                   // 56: helloworld.v1.DeleteLessonReply
	(*LessonInfo)(nil),                          // 57: helloworld.v1.LessonInfo
	(*SliderInfo)(nil),                          // 58: helloworld.v1.SliderInfo
	(*CreateSliderRequest)(nil),                 // 59: helloworld.v1.CreateSliderRequest
	(*CreateSliderReply)(nil),                   // 60: helloworld.v1.CreateSliderReply
	(*GetSliderRequest)(nil),                    // 61: helloworld.v1.GetSliderRequest
	(*GetSliderReply)(nil),                      // 62: helloworld.v1.GetSliderReply
	(*DeleteSliderRequest)(nil),                 // 63: helloworld.v1.DeleteSliderRequest
	(*DeleteSliderReply)(nil),                   // 64: helloworld.v1.DeleteSliderReply
	(*UpdateSliderRequest)(nil),                 // 65: helloworld.v1.UpdateSliderRequest
	(*UpdateSliderReply)(nil),                   // 66: helloworld.v1.UpdateSliderReply
	(*ListSlidersByPriorityRequest)(nil),        // 67: helloworld.v1.ListSlidersByPriorityRequest
	(*ListSlidersByPriorityReply)(nil),          // 68: helloworld.v1.ListSlidersByPriorityReply
	(*GetInfoRequest)(nil),                      // 69: helloworld.v1.GetInfoRequest
	(*UserInfoReply)(nil),                       // 70: helloworld.v1.UserInfoReply
	(*LoginByJsonRequest)(nil),                  // 71: helloworld.v1.LoginByJsonRequest
	(*LoginByJsonReply)(nil),                    // 72: helloworld.v1.LoginByJsonReply
	(*RegisterUsernameRequest)(nil),             // 73: helloworld.v1.RegisterUsernameRequest
	(*RegisterUsernameReply)(nil),               // 74: helloworld.v1.RegisterUsernameReply
	(*LoginByJsonReplyData)(nil),                // 75: helloworld.v1.LoginByJsonReplyData
	(*DeleteCategoryReq)(nil),                   // 76: helloworld.v1.DeleteCategoryReq
	(*UpdateCategoryReq)(nil),                   // 77: helloworld.v1.UpdateCategoryReq
	(*SystemSettingsReply)(nil),                 // 78: helloworld.v1.SystemSettingsReply
	(*CreateOrderRequest)(nil),                  // 79: helloworld.v1.CreateOrderRequest
	(*OrderDetail)(nil),                         // 80: helloworld.v1.OrderDetail
	(*CreateOrderReply)(nil),                    // 81: helloworld.v1.CreateOrderReply
	(*timestamppb.Timestamp)(nil),               // 82: google.protobuf.Timestamp
}
var file_api_helloworld_v1_kubecit_proto_depIdxs = []int32{
	11, // 0: helloworld.v1.ListAllTeacherReply.teachers:type_name -> helloworld.v1.TeacherInfo
	82, // 1: helloworld.v1.TeacherInfo.create_at:type_name -> google.protobuf.Timestamp
	82, // 2: helloworld.v1.TeacherInfo.update_at:type_name -> google.protobuf.Timestamp
	0,  // 3: helloworld.v1.TeacherInfo.level:type_name -> helloworld.v1.TeacherLevel
	16, // 4: helloworld.v1.ListCategoryResp.categories:type_name -> helloworld.v1.CategoryInfo
	16, // 5: helloworld.v1.CategoryInfo.children:type_name -> helloworld.v1.CategoryInfo
	22, // 6: helloworld.v1.MostNewReply.list:type_name -> helloworld.v1.CourseInfo
	22, // 7: helloworld.v1.MostNewReplyData.list:type_name -> helloworld.v1.CourseInfo
	22, // 8: helloworld.v1.CourseSearchReply.list:type_name -> helloworld.v1.CourseInfo
	82, // 9: helloworld.v1.CourseInfo.createdAt:type_name -> google.protobuf.Timestamp
	82, // 10: helloworld.v1.CourseInfo.updatedAt:type_name -> google.protobuf.Timestamp
	25, // 11: helloworld.v1.TagsListReply.tags:type_name -> helloworld.v1.Tag
	2,  // 12: helloworld.v1.SearchCourseRequest.level:type_name -> helloworld.v1.CourseLevel
	2,  // 13: helloworld.v1.UpdateCourseRequest.level:type_name -> helloworld.v1.CourseLevel
	22, // 14: helloworld.v1.UpdateCourseReply.data:type_name -> helloworld.v1.CourseInfo
	1,  // 15: helloworld.v1.ReviewCourseRequest.status:type_name -> helloworld.v1.CourseStatus
	22, // 16: helloworld.v1.ReviewCourseReply.data:type_name -> helloworld.v1.CourseInfo
	2,  // 17: helloworld.v1.CreateCourseRequest.level:type_name -> helloworld.v1.CourseLevel
	22, // 18: helloworld.v1.CreateCourseReply.data:type_name -> helloworld.v1.CourseInfo
	22, // 19: helloworld.v1.ListCoursesReply.data:type_name -> helloworld.v1.CourseInfo
	22, // 20: helloworld.v1.GetCourseReply.data:type_name -> helloworld.v1.CourseInfo
	82, // 21: helloworld.v1.ChapterInfo.releasedTime:type_name -> google.protobuf.Timestamp
	4,  // 22: helloworld.v1.CreateChapterRequest.hasFreePreview:type_name -> helloworld.v1.FreePreview
	39, // 23: helloworld.v1.CreateChapterReply.data:type_name -> helloworld.v1.ChapterInfo
	4,  // 24: helloworld.v1.UpdateChapterRequest.hasFreePreview:type_name -> helloworld.v1.FreePreview
	39, // 25: helloworld.v1.UpdateChapterReply.data:type_name -> helloworld.v1.ChapterInfo
	39, // 26: helloworld.v1.ListChaptersReply.data:type_name -> helloworld.v1.ChapterInfo
	3,  // 27: helloworld.v1.CreateLessonRequest.type:type_name -> helloworld.v1.LessonType
	4,  // 28: helloworld.v1.CreateLessonRequest.isFreePreview:type_name -> helloworld.v1.FreePreview
	57, // 29: helloworld.v1.CreateLessonReply.data:type_name -> helloworld.v1.LessonInfo
	52, // 30: helloworld.v1.ListChapterLessonsWithCourIdReply.data:type_name -> helloworld.v1.ChapterLessonsInfo
	39, // 31: helloworld.v1.ChapterLessonsInfo.chapter:type_name -> helloworld.v1.ChapterInfo
	57, // 32: helloworld.v1.ChapterLessonsInfo.lessons:type_name -> helloworld.v1.LessonInfo
	3,  // 33: helloworld.v1.UpdateLessonRequest.type:type_name -> helloworld.v1.LessonType
	4,  // 34: helloworld.v1.UpdateLessonRequest.isFreePreview:type_name -> helloworld.v1.FreePreview
	57, // 35: helloworld.v1.UpdateLessonReply.data:type_name -> helloworld.v1.LessonInfo
	82, // 36: helloworld.v1.LessonInfo.releasedTime:type_name -> google.protobuf.Timestamp
	82, // 37: helloworld.v1.SliderInfo.createAt:type_name -> google.protobuf.Timestamp
	82, // 38: helloworld.v1.SliderInfo.updateAt:type_name -> google.protobuf.Timestamp
	58, // 39: helloworld.v1.CreateSliderReply.data:type_name -> helloworld.v1.SliderInfo
	58, // 40: helloworld.v1.GetSliderReply.data:type_name -> helloworld.v1.SliderInfo
	58, // 41: helloworld.v1.UpdateSliderReply.data:type_name -> helloworld.v1.SliderInfo
	58, // 42: helloworld.v1.ListSlidersByPriorityReply.data:type_name -> helloworld.v1.SliderInfo
	18, // 43: helloworld.v1.LoginByJsonReply.meta:type_name -> helloworld.v1.Metadata
	75, // 44: helloworld.v1.LoginByJsonReply.data:type_name -> helloworld.v1.LoginByJsonReplyData
	18, // 45: helloworld.v1.RegisterUsernameReply.meta:type_name -> helloworld.v1.Metadata
	75, // 46: helloworld.v1.RegisterUsernameReply.data:type_name -> helloworld.v1.LoginByJsonReplyData
	5,  // 47: helloworld.v1.CreateOrderReply.payType:type_name -> helloworld.v1.PayType
	6,  // 48: helloworld.v1.CreateOrderReply.payStatus:type_name -> helloworld.v1.PayStatus
	82, // 49: helloworld.v1.CreateOrderReply.payTime:type_name -> google.protobuf.Timestamp
	82, // 50: helloworld.v1.CreateOrderReply.createTime:type_name -> google.protobuf.Timestamp
	82, // 51: helloworld.v1.CreateOrderReply.updateTime:type_name -> google.protobuf.Timestamp
	80, // 52: helloworld.v1.CreateOrderReply.details:type_name -> helloworld.v1.OrderDetail
	14, // 53: helloworld.v1.Kubecit.ListCategory:input_type -> helloworld.v1.ListCategoryReq
	13, // 54: helloworld.v1.Kubecit.ListCategoryV2:input_type -> helloworld.v1.Empty
	16, // 55: helloworld.v1.Kubecit.CreateCategory:input_type -> helloworld.v1.CategoryInfo
	76, // 56: helloworld.v1.Kubecit.DeleteCategory:input_type -> helloworld.v1.DeleteCategoryReq
	77, // 57: helloworld.v1.Kubecit.UpdateCategory:input_type -> helloworld.v1.UpdateCategoryReq
	13, // 58: helloworld.v1.Kubecit.MostNew:input_type -> helloworld.v1.Empty
	23, // 59: helloworld.v1.Kubecit.TagsList:input_type -> helloworld.v1.TagsListRequest
	26, // 60: helloworld.v1.Kubecit.SearchCourse:input_type -> helloworld.v1.SearchCourseRequest
	27, // 61: helloworld.v1.Kubecit.UpdateCourse:input_type -> helloworld.v1.UpdateCourseRequest
	29, // 62: helloworld.v1.Kubecit.ReviewCourse:input_type -> helloworld.v1.ReviewCourseRequest
	31, // 63: helloworld.v1.Kubecit.CreateCourse:input_type -> helloworld.v1.CreateCourseRequest
	35, // 64: helloworld.v1.Kubecit.GetCourse:input_type -> helloworld.v1.GetCourseRequest
	37, // 65: helloworld.v1.Kubecit.DeleteCourse:input_type -> helloworld.v1.DeleteCourseRequest
	40, // 66: helloworld.v1.Kubecit.CreateChapter:input_type -> helloworld.v1.CreateChapterRequest
	42, // 67: helloworld.v1.Kubecit.DeleteChapter:input_type -> helloworld.v1.DeleteChapterRequest
	46, // 68: helloworld.v1.Kubecit.ListChapters:input_type -> helloworld.v1.ListChaptersRequest
	44, // 69: helloworld.v1.Kubecit.UpdateChapter:input_type -> helloworld.v1.UpdateChapterRequest
	48, // 70: helloworld.v1.Kubecit.CreateLesson:input_type -> helloworld.v1.CreateLessonRequest
	50, // 71: helloworld.v1.Kubecit.ListLessons:input_type -> helloworld.v1.ListChapterLessonsWithCourIdRequest
	53, // 72: helloworld.v1.Kubecit.UpdateLesson:input_type -> helloworld.v1.UpdateLessonRequest
	55, // 73: helloworld.v1.Kubecit.DeleteLesson:input_type -> helloworld.v1.DeleteLessonRequest
	69, // 74: helloworld.v1.Kubecit.GetInfo:input_type -> helloworld.v1.GetInfoRequest
	71, // 75: helloworld.v1.Kubecit.LoginByJson:input_type -> helloworld.v1.LoginByJsonRequest
	73, // 76: helloworld.v1.Kubecit.RegisterUsername:input_type -> helloworld.v1.RegisterUsernameRequest
	59, // 77: helloworld.v1.Kubecit.CreateSlider:input_type -> helloworld.v1.CreateSliderRequest
	61, // 78: helloworld.v1.Kubecit.GetSlider:input_type -> helloworld.v1.GetSliderRequest
	63, // 79: helloworld.v1.Kubecit.DeleteSlider:input_type -> helloworld.v1.DeleteSliderRequest
	65, // 80: helloworld.v1.Kubecit.UpdateSlider:input_type -> helloworld.v1.UpdateSliderRequest
	13, // 81: helloworld.v1.Kubecit.ListSlidersByPriority:input_type -> helloworld.v1.Empty
	13, // 82: helloworld.v1.Kubecit.SystemSettings:input_type -> helloworld.v1.Empty
	79, // 83: helloworld.v1.Kubecit.CreateOrder:input_type -> helloworld.v1.CreateOrderRequest
	8,  // 84: helloworld.v1.Kubecit.ListAllTeacher:input_type -> helloworld.v1.ListAllTeacherRequest
	9,  // 85: helloworld.v1.Kubecit.GetTeacher:input_type -> helloworld.v1.GetTeacherRequest
	7,  // 86: helloworld.v1.Kubecit.CreateTeacher:input_type -> helloworld.v1.CreateTeacherRequest
	15, // 87: helloworld.v1.Kubecit.ListCategory:output_type -> helloworld.v1.ListCategoryResp
	15, // 88: helloworld.v1.Kubecit.ListCategoryV2:output_type -> helloworld.v1.ListCategoryResp
	13, // 89: helloworld.v1.Kubecit.CreateCategory:output_type -> helloworld.v1.Empty
	13, // 90: helloworld.v1.Kubecit.DeleteCategory:output_type -> helloworld.v1.Empty
	13, // 91: helloworld.v1.Kubecit.UpdateCategory:output_type -> helloworld.v1.Empty
	19, // 92: helloworld.v1.Kubecit.MostNew:output_type -> helloworld.v1.MostNewReply
	24, // 93: helloworld.v1.Kubecit.TagsList:output_type -> helloworld.v1.TagsListReply
	21, // 94: helloworld.v1.Kubecit.SearchCourse:output_type -> helloworld.v1.CourseSearchReply
	28, // 95: helloworld.v1.Kubecit.UpdateCourse:output_type -> helloworld.v1.UpdateCourseReply
	30, // 96: helloworld.v1.Kubecit.ReviewCourse:output_type -> helloworld.v1.ReviewCourseReply
	32, // 97: helloworld.v1.Kubecit.CreateCourse:output_type -> helloworld.v1.CreateCourseReply
	36, // 98: helloworld.v1.Kubecit.GetCourse:output_type -> helloworld.v1.GetCourseReply
	38, // 99: helloworld.v1.Kubecit.DeleteCourse:output_type -> helloworld.v1.DeleteCourseReply
	41, // 100: helloworld.v1.Kubecit.CreateChapter:output_type -> helloworld.v1.CreateChapterReply
	43, // 101: helloworld.v1.Kubecit.DeleteChapter:output_type -> helloworld.v1.DeleteChapterReply
	47, // 102: helloworld.v1.Kubecit.ListChapters:output_type -> helloworld.v1.ListChaptersReply
	45, // 103: helloworld.v1.Kubecit.UpdateChapter:output_type -> helloworld.v1.UpdateChapterReply
	49, // 104: helloworld.v1.Kubecit.CreateLesson:output_type -> helloworld.v1.CreateLessonReply
	51, // 105: helloworld.v1.Kubecit.ListLessons:output_type -> helloworld.v1.ListChapterLessonsWithCourIdReply
	54, // 106: helloworld.v1.Kubecit.UpdateLesson:output_type -> helloworld.v1.UpdateLessonReply
	56, // 107: helloworld.v1.Kubecit.DeleteLesson:output_type -> helloworld.v1.DeleteLessonReply
	70, // 108: helloworld.v1.Kubecit.GetInfo:output_type -> helloworld.v1.UserInfoReply
	72, // 109: helloworld.v1.Kubecit.LoginByJson:output_type -> helloworld.v1.LoginByJsonReply
	74, // 110: helloworld.v1.Kubecit.RegisterUsername:output_type -> helloworld.v1.RegisterUsernameReply
	60, // 111: helloworld.v1.Kubecit.CreateSlider:output_type -> helloworld.v1.CreateSliderReply
	62, // 112: helloworld.v1.Kubecit.GetSlider:output_type -> helloworld.v1.GetSliderReply
	64, // 113: helloworld.v1.Kubecit.DeleteSlider:output_type -> helloworld.v1.DeleteSliderReply
	66, // 114: helloworld.v1.Kubecit.UpdateSlider:output_type -> helloworld.v1.UpdateSliderReply
	68, // 115: helloworld.v1.Kubecit.ListSlidersByPriority:output_type -> helloworld.v1.ListSlidersByPriorityReply
	78, // 116: helloworld.v1.Kubecit.SystemSettings:output_type -> helloworld.v1.SystemSettingsReply
	81, // 117: helloworld.v1.Kubecit.CreateOrder:output_type -> helloworld.v1.CreateOrderReply
	10, // 118: helloworld.v1.Kubecit.ListAllTeacher:output_type -> helloworld.v1.ListAllTeacherReply
	11, // 119: helloworld.v1.Kubecit.GetTeacher:output_type -> helloworld.v1.TeacherInfo
	11, // 120: helloworld.v1.Kubecit.CreateTeacher:output_type -> helloworld.v1.TeacherInfo
	87, // [87:121] is the sub-list for method output_type
	53, // [53:87] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_api_helloworld_v1_kubecit_proto_init() }
func file_api_helloworld_v1_kubecit_proto_init() {
	if File_api_helloworld_v1_kubecit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_helloworld_v1_kubecit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeacherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllTeacherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeacherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllTeacherReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeacherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MostNewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MostNewReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseSearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCourseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewCourseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCourseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCourseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChapterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChapterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChapterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChaptersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChaptersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChapterLessonsWithCourIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChapterLessonsWithCourIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterLessonsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSliderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSliderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSliderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSliderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSliderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSliderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSlidersByPriorityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSlidersByPriorityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByJsonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByJsonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUsernameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUsernameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByJsonReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSettingsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_helloworld_v1_kubecit_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_helloworld_v1_kubecit_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_api_helloworld_v1_kubecit_proto_msgTypes[46].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_helloworld_v1_kubecit_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_helloworld_v1_kubecit_proto_goTypes,
		DependencyIndexes: file_api_helloworld_v1_kubecit_proto_depIdxs,
		EnumInfos:         file_api_helloworld_v1_kubecit_proto_enumTypes,
		MessageInfos:      file_api_helloworld_v1_kubecit_proto_msgTypes,
	}.Build()
	File_api_helloworld_v1_kubecit_proto = out.File
	file_api_helloworld_v1_kubecit_proto_rawDesc = nil
	file_api_helloworld_v1_kubecit_proto_goTypes = nil
	file_api_helloworld_v1_kubecit_proto_depIdxs = nil
}
