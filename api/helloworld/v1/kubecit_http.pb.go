// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.21.12
// source: helloworld/v1/kubecit.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterCategory = "/helloworld.v1.Greeter/Category"
const OperationGreeterCreateSlider = "/helloworld.v1.Greeter/CreateSlider"
const OperationGreeterCreateToken = "/helloworld.v1.Greeter/CreateToken"
const OperationGreeterDeleteSlider = "/helloworld.v1.Greeter/DeleteSlider"
const OperationGreeterGetFirstCategories = "/helloworld.v1.Greeter/GetFirstCategories"
const OperationGreeterGetInfo = "/helloworld.v1.Greeter/GetInfo"
const OperationGreeterGetSlider = "/helloworld.v1.Greeter/GetSlider"
const OperationGreeterListSlidersByPriority = "/helloworld.v1.Greeter/ListSlidersByPriority"
const OperationGreeterLoginByJson = "/helloworld.v1.Greeter/LoginByJson"
const OperationGreeterMostNew = "/helloworld.v1.Greeter/MostNew"
const OperationGreeterRegisterUsername = "/helloworld.v1.Greeter/RegisterUsername"
const OperationGreeterSearchCourse = "/helloworld.v1.Greeter/SearchCourse"
const OperationGreeterTagsList = "/helloworld.v1.Greeter/TagsList"
const OperationGreeterUpdateSlider = "/helloworld.v1.Greeter/UpdateSlider"

type GreeterHTTPServer interface {
	Category(context.Context, *Empty) (*CategoryResp, error)
	CreateSlider(context.Context, *CreateSliderRequest) (*CreateSliderReply, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenReply, error)
	DeleteSlider(context.Context, *DeleteSliderRequest) (*DeleteSliderReply, error)
	GetFirstCategories(context.Context, *GetFirstCategoriesRequest) (*GetFirstCategoriesReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*UserInfoReply, error)
	GetSlider(context.Context, *GetSliderRequest) (*GetSliderReply, error)
	ListSlidersByPriority(context.Context, *ListSlidersByPriorityRequest) (*ListSlidersByPriorityReply, error)
	LoginByJson(context.Context, *LoginByJsonRequest) (*LoginByJsonReply, error)
	MostNew(context.Context, *PageRequest) (*MostNewReply, error)
	RegisterUsername(context.Context, *RegisterUsernameRequest) (*RegisterUsernameReply, error)
	SearchCourse(context.Context, *SearchCourseRequest) (*SearchCourseReply, error)
	TagsList(context.Context, *TagsListRequest) (*TagsListReply, error)
	UpdateSlider(context.Context, *UpdateSliderRequest) (*UpdateSliderReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/api/course/mostNew", _Greeter_MostNew0_HTTP_Handler(srv))
	r.GET("/api/course/category/getFirstCategories", _Greeter_GetFirstCategories0_HTTP_Handler(srv))
	r.POST("/api/course/tags/list", _Greeter_TagsList0_HTTP_Handler(srv))
	r.POST("/api/course/search", _Greeter_SearchCourse0_HTTP_Handler(srv))
	r.GET("/api/categories", _Greeter_Category0_HTTP_Handler(srv))
	r.GET("/api/member/getInfo", _Greeter_GetInfo0_HTTP_Handler(srv))
	r.POST("/api/u/loginByJson", _Greeter_LoginByJson0_HTTP_Handler(srv))
	r.POST("/api/u/registerUsername", _Greeter_RegisterUsername0_HTTP_Handler(srv))
	r.GET("/api/token/createToken", _Greeter_CreateToken0_HTTP_Handler(srv))
	r.POST("/api/slider", _Greeter_CreateSlider0_HTTP_Handler(srv))
	r.GET("/api/slider/{id}", _Greeter_GetSlider0_HTTP_Handler(srv))
	r.DELETE("/api/slider/{id}", _Greeter_DeleteSlider0_HTTP_Handler(srv))
	r.PUT("/api/slider/{id}", _Greeter_UpdateSlider0_HTTP_Handler(srv))
	r.POST("/api/sliders", _Greeter_ListSlidersByPriority0_HTTP_Handler(srv))
}

func _Greeter_MostNew0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterMostNew)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MostNew(ctx, req.(*PageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MostNewReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetFirstCategories0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFirstCategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetFirstCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFirstCategories(ctx, req.(*GetFirstCategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFirstCategoriesReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_TagsList0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TagsListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterTagsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TagsList(ctx, req.(*TagsListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TagsListReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_SearchCourse0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchCourseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSearchCourse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchCourse(ctx, req.(*SearchCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchCourseReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Category0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Category(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryResp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetInfo0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInfo(ctx, req.(*GetInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_LoginByJson0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByJsonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterLoginByJson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByJson(ctx, req.(*LoginByJsonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByJsonReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_RegisterUsername0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUsernameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterRegisterUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterUsername(ctx, req.(*RegisterUsernameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUsernameReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_CreateToken0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateToken(ctx, req.(*CreateTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_CreateSlider0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSliderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateSlider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSlider(ctx, req.(*CreateSliderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSliderReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetSlider0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSliderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetSlider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSlider(ctx, req.(*GetSliderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSliderReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_DeleteSlider0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSliderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterDeleteSlider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSlider(ctx, req.(*DeleteSliderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSliderReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UpdateSlider0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSliderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUpdateSlider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSlider(ctx, req.(*UpdateSliderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSliderReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ListSlidersByPriority0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSlidersByPriorityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterListSlidersByPriority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSlidersByPriority(ctx, req.(*ListSlidersByPriorityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSlidersByPriorityReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	Category(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *CategoryResp, err error)
	CreateSlider(ctx context.Context, req *CreateSliderRequest, opts ...http.CallOption) (rsp *CreateSliderReply, err error)
	CreateToken(ctx context.Context, req *CreateTokenRequest, opts ...http.CallOption) (rsp *CreateTokenReply, err error)
	DeleteSlider(ctx context.Context, req *DeleteSliderRequest, opts ...http.CallOption) (rsp *DeleteSliderReply, err error)
	GetFirstCategories(ctx context.Context, req *GetFirstCategoriesRequest, opts ...http.CallOption) (rsp *GetFirstCategoriesReply, err error)
	GetInfo(ctx context.Context, req *GetInfoRequest, opts ...http.CallOption) (rsp *UserInfoReply, err error)
	GetSlider(ctx context.Context, req *GetSliderRequest, opts ...http.CallOption) (rsp *GetSliderReply, err error)
	ListSlidersByPriority(ctx context.Context, req *ListSlidersByPriorityRequest, opts ...http.CallOption) (rsp *ListSlidersByPriorityReply, err error)
	LoginByJson(ctx context.Context, req *LoginByJsonRequest, opts ...http.CallOption) (rsp *LoginByJsonReply, err error)
	MostNew(ctx context.Context, req *PageRequest, opts ...http.CallOption) (rsp *MostNewReply, err error)
	RegisterUsername(ctx context.Context, req *RegisterUsernameRequest, opts ...http.CallOption) (rsp *RegisterUsernameReply, err error)
	SearchCourse(ctx context.Context, req *SearchCourseRequest, opts ...http.CallOption) (rsp *SearchCourseReply, err error)
	TagsList(ctx context.Context, req *TagsListRequest, opts ...http.CallOption) (rsp *TagsListReply, err error)
	UpdateSlider(ctx context.Context, req *UpdateSliderRequest, opts ...http.CallOption) (rsp *UpdateSliderReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) Category(ctx context.Context, in *Empty, opts ...http.CallOption) (*CategoryResp, error) {
	var out CategoryResp
	pattern := "/api/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) CreateSlider(ctx context.Context, in *CreateSliderRequest, opts ...http.CallOption) (*CreateSliderReply, error) {
	var out CreateSliderReply
	pattern := "/api/slider"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCreateSlider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...http.CallOption) (*CreateTokenReply, error) {
	var out CreateTokenReply
	pattern := "/api/token/createToken"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterCreateToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) DeleteSlider(ctx context.Context, in *DeleteSliderRequest, opts ...http.CallOption) (*DeleteSliderReply, error) {
	var out DeleteSliderReply
	pattern := "/api/slider/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterDeleteSlider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetFirstCategories(ctx context.Context, in *GetFirstCategoriesRequest, opts ...http.CallOption) (*GetFirstCategoriesReply, error) {
	var out GetFirstCategoriesReply
	pattern := "/api/course/category/getFirstCategories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetFirstCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "/api/member/getInfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetSlider(ctx context.Context, in *GetSliderRequest, opts ...http.CallOption) (*GetSliderReply, error) {
	var out GetSliderReply
	pattern := "/api/slider/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetSlider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ListSlidersByPriority(ctx context.Context, in *ListSlidersByPriorityRequest, opts ...http.CallOption) (*ListSlidersByPriorityReply, error) {
	var out ListSlidersByPriorityReply
	pattern := "/api/sliders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterListSlidersByPriority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) LoginByJson(ctx context.Context, in *LoginByJsonRequest, opts ...http.CallOption) (*LoginByJsonReply, error) {
	var out LoginByJsonReply
	pattern := "/api/u/loginByJson"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterLoginByJson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) MostNew(ctx context.Context, in *PageRequest, opts ...http.CallOption) (*MostNewReply, error) {
	var out MostNewReply
	pattern := "/api/course/mostNew"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterMostNew))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) RegisterUsername(ctx context.Context, in *RegisterUsernameRequest, opts ...http.CallOption) (*RegisterUsernameReply, error) {
	var out RegisterUsernameReply
	pattern := "/api/u/registerUsername"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterRegisterUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) SearchCourse(ctx context.Context, in *SearchCourseRequest, opts ...http.CallOption) (*SearchCourseReply, error) {
	var out SearchCourseReply
	pattern := "/api/course/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSearchCourse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) TagsList(ctx context.Context, in *TagsListRequest, opts ...http.CallOption) (*TagsListReply, error) {
	var out TagsListReply
	pattern := "/api/course/tags/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterTagsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UpdateSlider(ctx context.Context, in *UpdateSliderRequest, opts ...http.CallOption) (*UpdateSliderReply, error) {
	var out UpdateSliderReply
	pattern := "/api/slider/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterUpdateSlider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
